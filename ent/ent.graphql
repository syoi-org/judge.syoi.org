directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateJudgeInput is used for create Judge object.
Input was generated by ent.
"""
input CreateJudgeInput {
  """
  Time when the entity was created.
  """
  createdAt: Time
  """
  Time when the entity was last updated.
  """
  updatedAt: Time
  """
  Name of the judge. Example: Aizu Online Judge
  """
  name: String!
  """
  Unique codename of the judge. Example: AZOJ
  """
  code: String!
  """
  Type of the judge. Example: local
  """
  type: JudgeType
  """
  Configuration of the judge. Encoded in form urlencoded format (key1=value1&key2=value2...).
  """
  configuration: String!
  problemIDs: [ID!]
}
"""
CreateProblemInput is used for create Problem object.
Input was generated by ent.
"""
input CreateProblemInput {
  """
  Time when the entity was created.
  """
  createdAt: Time
  """
  Time when the entity was last updated.
  """
  updatedAt: Time
  """
  Name of the problem. Example: A+B Problem
  """
  name: String!
  """
  Unique codename of the problem. Example: AZ2008B
  """
  code: String!
  submissionIDs: [ID!]
  judgeID: ID!
}
"""
CreateSubmissionInput is used for create Submission object.
Input was generated by ent.
"""
input CreateSubmissionInput {
  """
  Time when the entity was created.
  """
  createdAt: Time
  """
  Time when the entity was last updated.
  """
  updatedAt: Time
  """
  Status of the submission. Example: finished
  """
  status: SubmissionStatus
  """
  Verdict of the submission. Example: OK
  """
  verdict: SubmissionVerdict
  """
  Number of test cases finished or currently judging. Example: 13
  """
  testCount: Int
  problemID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Judge implements Node {
  id: ID!
  """
  Time when the entity was created.
  """
  createdAt: Time!
  """
  Time when the entity was last updated.
  """
  updatedAt: Time!
  """
  Name of the judge. Example: Aizu Online Judge
  """
  name: String!
  """
  Unique codename of the judge. Example: AZOJ
  """
  code: String!
  """
  Type of the judge. Example: local
  """
  type: JudgeType!
  """
  Configuration of the judge. Encoded in form urlencoded format (key1=value1&key2=value2...).
  """
  configuration: String!
  problems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProblemConnection!
}
"""
A connection to a list of items.
"""
type JudgeConnection {
  """
  A list of edges.
  """
  edges: [JudgeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type JudgeEdge {
  """
  The item at the end of the edge.
  """
  node: Judge
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
JudgeType is enum for the field type
"""
enum JudgeType @goModel(model: "github.com/syoi-org/judy/ent/judge.Type") {
  local
  codeforces
  vjudge
  syoj
  noop
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/syoi-org/judy/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Problem implements Node {
  id: ID!
  """
  Time when the entity was created.
  """
  createdAt: Time!
  """
  Time when the entity was last updated.
  """
  updatedAt: Time!
  """
  Name of the problem. Example: A+B Problem
  """
  name: String!
  """
  Unique codename of the problem. Example: AZ2008B
  """
  code: String!
  submissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmissionConnection!
  judge: Judge!
}
"""
A connection to a list of items.
"""
type ProblemConnection {
  """
  A list of edges.
  """
  edges: [ProblemEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type ProblemEdge {
  """
  The item at the end of the edge.
  """
  node: Problem
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  judges(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): JudgeConnection!
  problems(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProblemConnection!
  submissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): SubmissionConnection!
}
type Submission implements Node {
  id: ID!
  """
  Time when the entity was created.
  """
  createdAt: Time!
  """
  Time when the entity was last updated.
  """
  updatedAt: Time!
  """
  Status of the submission. Example: finished
  """
  status: SubmissionStatus!
  """
  Verdict of the submission. Example: OK
  """
  verdict: SubmissionVerdict!
  """
  Number of test cases finished or currently judging. Example: 13
  """
  testCount: Int!
  problem: Problem!
}
"""
A connection to a list of items.
"""
type SubmissionConnection {
  """
  A list of edges.
  """
  edges: [SubmissionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type SubmissionEdge {
  """
  The item at the end of the edge.
  """
  node: Submission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
SubmissionStatus is enum for the field status
"""
enum SubmissionStatus @goModel(model: "github.com/syoi-org/judy/ent/submission.Status") {
  pending
  compiling
  judging
  finished
}
"""
SubmissionVerdict is enum for the field verdict
"""
enum SubmissionVerdict @goModel(model: "github.com/syoi-org/judy/ent/submission.Verdict") {
  OK
  TLE
  MLE
  ILE
  WA
  CE
  RE
  PE
  CRASHED
  OTHER
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateJudgeInput is used for update Judge object.
Input was generated by ent.
"""
input UpdateJudgeInput {
  """
  Time when the entity was last updated.
  """
  updatedAt: Time
  """
  Name of the judge. Example: Aizu Online Judge
  """
  name: String
  """
  Unique codename of the judge. Example: AZOJ
  """
  code: String
  """
  Type of the judge. Example: local
  """
  type: JudgeType
  """
  Configuration of the judge. Encoded in form urlencoded format (key1=value1&key2=value2...).
  """
  configuration: String
  addProblemIDs: [ID!]
  removeProblemIDs: [ID!]
  clearProblems: Boolean
}
"""
UpdateProblemInput is used for update Problem object.
Input was generated by ent.
"""
input UpdateProblemInput {
  """
  Time when the entity was last updated.
  """
  updatedAt: Time
  """
  Name of the problem. Example: A+B Problem
  """
  name: String
  """
  Unique codename of the problem. Example: AZ2008B
  """
  code: String
  addSubmissionIDs: [ID!]
  removeSubmissionIDs: [ID!]
  clearSubmissions: Boolean
  judgeID: ID
}
"""
UpdateSubmissionInput is used for update Submission object.
Input was generated by ent.
"""
input UpdateSubmissionInput {
  """
  Time when the entity was last updated.
  """
  updatedAt: Time
  """
  Status of the submission. Example: finished
  """
  status: SubmissionStatus
  """
  Verdict of the submission. Example: OK
  """
  verdict: SubmissionVerdict
  """
  Number of test cases finished or currently judging. Example: 13
  """
  testCount: Int
  problemID: ID
}
