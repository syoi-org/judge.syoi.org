// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/syoi-org/judy/ent/judge"
	"github.com/syoi-org/judy/ent/predicate"
	"github.com/syoi-org/judy/ent/problem"
	"github.com/syoi-org/judy/ent/submission"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeJudge      = "Judge"
	TypeProblem    = "Problem"
	TypeSubmission = "Submission"
)

// JudgeMutation represents an operation that mutates the Judge nodes in the graph.
type JudgeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	code            *string
	_type           *judge.Type
	configuration   *map[string]string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	problems        map[int]struct{}
	removedproblems map[int]struct{}
	clearedproblems bool
	done            bool
	oldValue        func(context.Context) (*Judge, error)
	predicates      []predicate.Judge
}

var _ ent.Mutation = (*JudgeMutation)(nil)

// judgeOption allows management of the mutation configuration using functional options.
type judgeOption func(*JudgeMutation)

// newJudgeMutation creates new mutation for the Judge entity.
func newJudgeMutation(c config, op Op, opts ...judgeOption) *JudgeMutation {
	m := &JudgeMutation{
		config:        c,
		op:            op,
		typ:           TypeJudge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withJudgeID sets the ID field of the mutation.
func withJudgeID(id int) judgeOption {
	return func(m *JudgeMutation) {
		var (
			err   error
			once  sync.Once
			value *Judge
		)
		m.oldValue = func(ctx context.Context) (*Judge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Judge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withJudge sets the old Judge of the mutation.
func withJudge(node *Judge) judgeOption {
	return func(m *JudgeMutation) {
		m.oldValue = func(context.Context) (*Judge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JudgeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JudgeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *JudgeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *JudgeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Judge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *JudgeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *JudgeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Judge entity.
// If the Judge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JudgeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *JudgeMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *JudgeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *JudgeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Judge entity.
// If the Judge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JudgeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *JudgeMutation) ResetCode() {
	m.code = nil
}

// SetType sets the "type" field.
func (m *JudgeMutation) SetType(j judge.Type) {
	m._type = &j
}

// GetType returns the value of the "type" field in the mutation.
func (m *JudgeMutation) GetType() (r judge.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Judge entity.
// If the Judge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JudgeMutation) OldType(ctx context.Context) (v judge.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *JudgeMutation) ResetType() {
	m._type = nil
}

// SetConfiguration sets the "configuration" field.
func (m *JudgeMutation) SetConfiguration(value map[string]string) {
	m.configuration = &value
}

// Configuration returns the value of the "configuration" field in the mutation.
func (m *JudgeMutation) Configuration() (r map[string]string, exists bool) {
	v := m.configuration
	if v == nil {
		return
	}
	return *v, true
}

// OldConfiguration returns the old "configuration" field's value of the Judge entity.
// If the Judge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JudgeMutation) OldConfiguration(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfiguration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfiguration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfiguration: %w", err)
	}
	return oldValue.Configuration, nil
}

// ResetConfiguration resets all changes to the "configuration" field.
func (m *JudgeMutation) ResetConfiguration() {
	m.configuration = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *JudgeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *JudgeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Judge entity.
// If the Judge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JudgeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *JudgeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *JudgeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *JudgeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Judge entity.
// If the Judge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *JudgeMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *JudgeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProblemIDs adds the "problems" edge to the Problem entity by ids.
func (m *JudgeMutation) AddProblemIDs(ids ...int) {
	if m.problems == nil {
		m.problems = make(map[int]struct{})
	}
	for i := range ids {
		m.problems[ids[i]] = struct{}{}
	}
}

// ClearProblems clears the "problems" edge to the Problem entity.
func (m *JudgeMutation) ClearProblems() {
	m.clearedproblems = true
}

// ProblemsCleared reports if the "problems" edge to the Problem entity was cleared.
func (m *JudgeMutation) ProblemsCleared() bool {
	return m.clearedproblems
}

// RemoveProblemIDs removes the "problems" edge to the Problem entity by IDs.
func (m *JudgeMutation) RemoveProblemIDs(ids ...int) {
	if m.removedproblems == nil {
		m.removedproblems = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.problems, ids[i])
		m.removedproblems[ids[i]] = struct{}{}
	}
}

// RemovedProblems returns the removed IDs of the "problems" edge to the Problem entity.
func (m *JudgeMutation) RemovedProblemsIDs() (ids []int) {
	for id := range m.removedproblems {
		ids = append(ids, id)
	}
	return
}

// ProblemsIDs returns the "problems" edge IDs in the mutation.
func (m *JudgeMutation) ProblemsIDs() (ids []int) {
	for id := range m.problems {
		ids = append(ids, id)
	}
	return
}

// ResetProblems resets all changes to the "problems" edge.
func (m *JudgeMutation) ResetProblems() {
	m.problems = nil
	m.clearedproblems = false
	m.removedproblems = nil
}

// Where appends a list predicates to the JudgeMutation builder.
func (m *JudgeMutation) Where(ps ...predicate.Judge) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the JudgeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *JudgeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Judge, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *JudgeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *JudgeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Judge).
func (m *JudgeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *JudgeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, judge.FieldName)
	}
	if m.code != nil {
		fields = append(fields, judge.FieldCode)
	}
	if m._type != nil {
		fields = append(fields, judge.FieldType)
	}
	if m.configuration != nil {
		fields = append(fields, judge.FieldConfiguration)
	}
	if m.created_at != nil {
		fields = append(fields, judge.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, judge.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *JudgeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case judge.FieldName:
		return m.Name()
	case judge.FieldCode:
		return m.Code()
	case judge.FieldType:
		return m.GetType()
	case judge.FieldConfiguration:
		return m.Configuration()
	case judge.FieldCreatedAt:
		return m.CreatedAt()
	case judge.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *JudgeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case judge.FieldName:
		return m.OldName(ctx)
	case judge.FieldCode:
		return m.OldCode(ctx)
	case judge.FieldType:
		return m.OldType(ctx)
	case judge.FieldConfiguration:
		return m.OldConfiguration(ctx)
	case judge.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case judge.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Judge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JudgeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case judge.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case judge.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case judge.FieldType:
		v, ok := value.(judge.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case judge.FieldConfiguration:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfiguration(v)
		return nil
	case judge.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case judge.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Judge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *JudgeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *JudgeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *JudgeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Judge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *JudgeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *JudgeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *JudgeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Judge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *JudgeMutation) ResetField(name string) error {
	switch name {
	case judge.FieldName:
		m.ResetName()
		return nil
	case judge.FieldCode:
		m.ResetCode()
		return nil
	case judge.FieldType:
		m.ResetType()
		return nil
	case judge.FieldConfiguration:
		m.ResetConfiguration()
		return nil
	case judge.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case judge.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Judge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *JudgeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.problems != nil {
		edges = append(edges, judge.EdgeProblems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *JudgeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case judge.EdgeProblems:
		ids := make([]ent.Value, 0, len(m.problems))
		for id := range m.problems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *JudgeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedproblems != nil {
		edges = append(edges, judge.EdgeProblems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *JudgeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case judge.EdgeProblems:
		ids := make([]ent.Value, 0, len(m.removedproblems))
		for id := range m.removedproblems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *JudgeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproblems {
		edges = append(edges, judge.EdgeProblems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *JudgeMutation) EdgeCleared(name string) bool {
	switch name {
	case judge.EdgeProblems:
		return m.clearedproblems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *JudgeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Judge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *JudgeMutation) ResetEdge(name string) error {
	switch name {
	case judge.EdgeProblems:
		m.ResetProblems()
		return nil
	}
	return fmt.Errorf("unknown Judge edge %s", name)
}

// ProblemMutation represents an operation that mutates the Problem nodes in the graph.
type ProblemMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	code               *string
	created_at         *time.Time
	updated_at         *time.Time
	clearedFields      map[string]struct{}
	submissions        map[int]struct{}
	removedsubmissions map[int]struct{}
	clearedsubmissions bool
	judge              *int
	clearedjudge       bool
	done               bool
	oldValue           func(context.Context) (*Problem, error)
	predicates         []predicate.Problem
}

var _ ent.Mutation = (*ProblemMutation)(nil)

// problemOption allows management of the mutation configuration using functional options.
type problemOption func(*ProblemMutation)

// newProblemMutation creates new mutation for the Problem entity.
func newProblemMutation(c config, op Op, opts ...problemOption) *ProblemMutation {
	m := &ProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProblemID sets the ID field of the mutation.
func withProblemID(id int) problemOption {
	return func(m *ProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *Problem
		)
		m.oldValue = func(ctx context.Context) (*Problem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Problem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProblem sets the old Problem of the mutation.
func withProblem(node *Problem) problemOption {
	return func(m *ProblemMutation) {
		m.oldValue = func(context.Context) (*Problem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProblemMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProblemMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Problem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProblemMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProblemMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ProblemMutation) ResetName() {
	m.name = nil
}

// SetCode sets the "code" field.
func (m *ProblemMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProblemMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *ProblemMutation) ResetCode() {
	m.code = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ProblemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ProblemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ProblemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ProblemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ProblemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Problem entity.
// If the Problem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProblemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ProblemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddSubmissionIDs adds the "submissions" edge to the Submission entity by ids.
func (m *ProblemMutation) AddSubmissionIDs(ids ...int) {
	if m.submissions == nil {
		m.submissions = make(map[int]struct{})
	}
	for i := range ids {
		m.submissions[ids[i]] = struct{}{}
	}
}

// ClearSubmissions clears the "submissions" edge to the Submission entity.
func (m *ProblemMutation) ClearSubmissions() {
	m.clearedsubmissions = true
}

// SubmissionsCleared reports if the "submissions" edge to the Submission entity was cleared.
func (m *ProblemMutation) SubmissionsCleared() bool {
	return m.clearedsubmissions
}

// RemoveSubmissionIDs removes the "submissions" edge to the Submission entity by IDs.
func (m *ProblemMutation) RemoveSubmissionIDs(ids ...int) {
	if m.removedsubmissions == nil {
		m.removedsubmissions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.submissions, ids[i])
		m.removedsubmissions[ids[i]] = struct{}{}
	}
}

// RemovedSubmissions returns the removed IDs of the "submissions" edge to the Submission entity.
func (m *ProblemMutation) RemovedSubmissionsIDs() (ids []int) {
	for id := range m.removedsubmissions {
		ids = append(ids, id)
	}
	return
}

// SubmissionsIDs returns the "submissions" edge IDs in the mutation.
func (m *ProblemMutation) SubmissionsIDs() (ids []int) {
	for id := range m.submissions {
		ids = append(ids, id)
	}
	return
}

// ResetSubmissions resets all changes to the "submissions" edge.
func (m *ProblemMutation) ResetSubmissions() {
	m.submissions = nil
	m.clearedsubmissions = false
	m.removedsubmissions = nil
}

// SetJudgeID sets the "judge" edge to the Judge entity by id.
func (m *ProblemMutation) SetJudgeID(id int) {
	m.judge = &id
}

// ClearJudge clears the "judge" edge to the Judge entity.
func (m *ProblemMutation) ClearJudge() {
	m.clearedjudge = true
}

// JudgeCleared reports if the "judge" edge to the Judge entity was cleared.
func (m *ProblemMutation) JudgeCleared() bool {
	return m.clearedjudge
}

// JudgeID returns the "judge" edge ID in the mutation.
func (m *ProblemMutation) JudgeID() (id int, exists bool) {
	if m.judge != nil {
		return *m.judge, true
	}
	return
}

// JudgeIDs returns the "judge" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// JudgeID instead. It exists only for internal usage by the builders.
func (m *ProblemMutation) JudgeIDs() (ids []int) {
	if id := m.judge; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetJudge resets all changes to the "judge" edge.
func (m *ProblemMutation) ResetJudge() {
	m.judge = nil
	m.clearedjudge = false
}

// Where appends a list predicates to the ProblemMutation builder.
func (m *ProblemMutation) Where(ps ...predicate.Problem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Problem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Problem).
func (m *ProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProblemMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, problem.FieldName)
	}
	if m.code != nil {
		fields = append(fields, problem.FieldCode)
	}
	if m.created_at != nil {
		fields = append(fields, problem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, problem.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case problem.FieldName:
		return m.Name()
	case problem.FieldCode:
		return m.Code()
	case problem.FieldCreatedAt:
		return m.CreatedAt()
	case problem.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case problem.FieldName:
		return m.OldName(ctx)
	case problem.FieldCode:
		return m.OldCode(ctx)
	case problem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case problem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Problem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case problem.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case problem.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case problem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case problem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Problem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProblemMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProblemMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Problem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProblemMutation) ResetField(name string) error {
	switch name {
	case problem.FieldName:
		m.ResetName()
		return nil
	case problem.FieldCode:
		m.ResetCode()
		return nil
	case problem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case problem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Problem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.submissions != nil {
		edges = append(edges, problem.EdgeSubmissions)
	}
	if m.judge != nil {
		edges = append(edges, problem.EdgeJudge)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case problem.EdgeSubmissions:
		ids := make([]ent.Value, 0, len(m.submissions))
		for id := range m.submissions {
			ids = append(ids, id)
		}
		return ids
	case problem.EdgeJudge:
		if id := m.judge; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsubmissions != nil {
		edges = append(edges, problem.EdgeSubmissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProblemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case problem.EdgeSubmissions:
		ids := make([]ent.Value, 0, len(m.removedsubmissions))
		for id := range m.removedsubmissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsubmissions {
		edges = append(edges, problem.EdgeSubmissions)
	}
	if m.clearedjudge {
		edges = append(edges, problem.EdgeJudge)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case problem.EdgeSubmissions:
		return m.clearedsubmissions
	case problem.EdgeJudge:
		return m.clearedjudge
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProblemMutation) ClearEdge(name string) error {
	switch name {
	case problem.EdgeJudge:
		m.ClearJudge()
		return nil
	}
	return fmt.Errorf("unknown Problem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProblemMutation) ResetEdge(name string) error {
	switch name {
	case problem.EdgeSubmissions:
		m.ResetSubmissions()
		return nil
	case problem.EdgeJudge:
		m.ResetJudge()
		return nil
	}
	return fmt.Errorf("unknown Problem edge %s", name)
}

// SubmissionMutation represents an operation that mutates the Submission nodes in the graph.
type SubmissionMutation struct {
	config
	op             Op
	typ            string
	id             *int
	status         *submission.Status
	verdict        *submission.Verdict
	test_count     *int
	addtest_count  *int
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	problem        *int
	clearedproblem bool
	done           bool
	oldValue       func(context.Context) (*Submission, error)
	predicates     []predicate.Submission
}

var _ ent.Mutation = (*SubmissionMutation)(nil)

// submissionOption allows management of the mutation configuration using functional options.
type submissionOption func(*SubmissionMutation)

// newSubmissionMutation creates new mutation for the Submission entity.
func newSubmissionMutation(c config, op Op, opts ...submissionOption) *SubmissionMutation {
	m := &SubmissionMutation{
		config:        c,
		op:            op,
		typ:           TypeSubmission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubmissionID sets the ID field of the mutation.
func withSubmissionID(id int) submissionOption {
	return func(m *SubmissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Submission
		)
		m.oldValue = func(ctx context.Context) (*Submission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Submission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubmission sets the old Submission of the mutation.
func withSubmission(node *Submission) submissionOption {
	return func(m *SubmissionMutation) {
		m.oldValue = func(context.Context) (*Submission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubmissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubmissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubmissionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubmissionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Submission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *SubmissionMutation) SetStatus(s submission.Status) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *SubmissionMutation) Status() (r submission.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Submission entity.
// If the Submission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmissionMutation) OldStatus(ctx context.Context) (v submission.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *SubmissionMutation) ResetStatus() {
	m.status = nil
}

// SetVerdict sets the "verdict" field.
func (m *SubmissionMutation) SetVerdict(s submission.Verdict) {
	m.verdict = &s
}

// Verdict returns the value of the "verdict" field in the mutation.
func (m *SubmissionMutation) Verdict() (r submission.Verdict, exists bool) {
	v := m.verdict
	if v == nil {
		return
	}
	return *v, true
}

// OldVerdict returns the old "verdict" field's value of the Submission entity.
// If the Submission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmissionMutation) OldVerdict(ctx context.Context) (v submission.Verdict, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVerdict is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVerdict requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVerdict: %w", err)
	}
	return oldValue.Verdict, nil
}

// ResetVerdict resets all changes to the "verdict" field.
func (m *SubmissionMutation) ResetVerdict() {
	m.verdict = nil
}

// SetTestCount sets the "test_count" field.
func (m *SubmissionMutation) SetTestCount(i int) {
	m.test_count = &i
	m.addtest_count = nil
}

// TestCount returns the value of the "test_count" field in the mutation.
func (m *SubmissionMutation) TestCount() (r int, exists bool) {
	v := m.test_count
	if v == nil {
		return
	}
	return *v, true
}

// OldTestCount returns the old "test_count" field's value of the Submission entity.
// If the Submission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmissionMutation) OldTestCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTestCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTestCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTestCount: %w", err)
	}
	return oldValue.TestCount, nil
}

// AddTestCount adds i to the "test_count" field.
func (m *SubmissionMutation) AddTestCount(i int) {
	if m.addtest_count != nil {
		*m.addtest_count += i
	} else {
		m.addtest_count = &i
	}
}

// AddedTestCount returns the value that was added to the "test_count" field in this mutation.
func (m *SubmissionMutation) AddedTestCount() (r int, exists bool) {
	v := m.addtest_count
	if v == nil {
		return
	}
	return *v, true
}

// ResetTestCount resets all changes to the "test_count" field.
func (m *SubmissionMutation) ResetTestCount() {
	m.test_count = nil
	m.addtest_count = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubmissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubmissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Submission entity.
// If the Submission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubmissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SubmissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SubmissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Submission entity.
// If the Submission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubmissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SubmissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetProblemID sets the "problem" edge to the Problem entity by id.
func (m *SubmissionMutation) SetProblemID(id int) {
	m.problem = &id
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (m *SubmissionMutation) ClearProblem() {
	m.clearedproblem = true
}

// ProblemCleared reports if the "problem" edge to the Problem entity was cleared.
func (m *SubmissionMutation) ProblemCleared() bool {
	return m.clearedproblem
}

// ProblemID returns the "problem" edge ID in the mutation.
func (m *SubmissionMutation) ProblemID() (id int, exists bool) {
	if m.problem != nil {
		return *m.problem, true
	}
	return
}

// ProblemIDs returns the "problem" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ProblemID instead. It exists only for internal usage by the builders.
func (m *SubmissionMutation) ProblemIDs() (ids []int) {
	if id := m.problem; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProblem resets all changes to the "problem" edge.
func (m *SubmissionMutation) ResetProblem() {
	m.problem = nil
	m.clearedproblem = false
}

// Where appends a list predicates to the SubmissionMutation builder.
func (m *SubmissionMutation) Where(ps ...predicate.Submission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubmissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubmissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Submission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubmissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubmissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Submission).
func (m *SubmissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubmissionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.status != nil {
		fields = append(fields, submission.FieldStatus)
	}
	if m.verdict != nil {
		fields = append(fields, submission.FieldVerdict)
	}
	if m.test_count != nil {
		fields = append(fields, submission.FieldTestCount)
	}
	if m.created_at != nil {
		fields = append(fields, submission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, submission.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubmissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case submission.FieldStatus:
		return m.Status()
	case submission.FieldVerdict:
		return m.Verdict()
	case submission.FieldTestCount:
		return m.TestCount()
	case submission.FieldCreatedAt:
		return m.CreatedAt()
	case submission.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubmissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case submission.FieldStatus:
		return m.OldStatus(ctx)
	case submission.FieldVerdict:
		return m.OldVerdict(ctx)
	case submission.FieldTestCount:
		return m.OldTestCount(ctx)
	case submission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case submission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Submission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case submission.FieldStatus:
		v, ok := value.(submission.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case submission.FieldVerdict:
		v, ok := value.(submission.Verdict)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVerdict(v)
		return nil
	case submission.FieldTestCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTestCount(v)
		return nil
	case submission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case submission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Submission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubmissionMutation) AddedFields() []string {
	var fields []string
	if m.addtest_count != nil {
		fields = append(fields, submission.FieldTestCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubmissionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case submission.FieldTestCount:
		return m.AddedTestCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubmissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case submission.FieldTestCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTestCount(v)
		return nil
	}
	return fmt.Errorf("unknown Submission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubmissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubmissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubmissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Submission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubmissionMutation) ResetField(name string) error {
	switch name {
	case submission.FieldStatus:
		m.ResetStatus()
		return nil
	case submission.FieldVerdict:
		m.ResetVerdict()
		return nil
	case submission.FieldTestCount:
		m.ResetTestCount()
		return nil
	case submission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case submission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Submission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubmissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.problem != nil {
		edges = append(edges, submission.EdgeProblem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubmissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case submission.EdgeProblem:
		if id := m.problem; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubmissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubmissionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubmissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedproblem {
		edges = append(edges, submission.EdgeProblem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubmissionMutation) EdgeCleared(name string) bool {
	switch name {
	case submission.EdgeProblem:
		return m.clearedproblem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubmissionMutation) ClearEdge(name string) error {
	switch name {
	case submission.EdgeProblem:
		m.ClearProblem()
		return nil
	}
	return fmt.Errorf("unknown Submission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubmissionMutation) ResetEdge(name string) error {
	switch name {
	case submission.EdgeProblem:
		m.ResetProblem()
		return nil
	}
	return fmt.Errorf("unknown Submission edge %s", name)
}
