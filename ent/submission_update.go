// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syoi-org/judy/ent/predicate"
	"github.com/syoi-org/judy/ent/problem"
	"github.com/syoi-org/judy/ent/submission"
)

// SubmissionUpdate is the builder for updating Submission entities.
type SubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *SubmissionMutation
}

// Where appends a list predicates to the SubmissionUpdate builder.
func (su *SubmissionUpdate) Where(ps ...predicate.Submission) *SubmissionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubmissionUpdate) SetUpdatedAt(t time.Time) *SubmissionUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetStatus sets the "status" field.
func (su *SubmissionUpdate) SetStatus(s submission.Status) *SubmissionUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableStatus(s *submission.Status) *SubmissionUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// SetVerdict sets the "verdict" field.
func (su *SubmissionUpdate) SetVerdict(s submission.Verdict) *SubmissionUpdate {
	su.mutation.SetVerdict(s)
	return su
}

// SetNillableVerdict sets the "verdict" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableVerdict(s *submission.Verdict) *SubmissionUpdate {
	if s != nil {
		su.SetVerdict(*s)
	}
	return su
}

// SetTestCount sets the "test_count" field.
func (su *SubmissionUpdate) SetTestCount(i int) *SubmissionUpdate {
	su.mutation.ResetTestCount()
	su.mutation.SetTestCount(i)
	return su
}

// SetNillableTestCount sets the "test_count" field if the given value is not nil.
func (su *SubmissionUpdate) SetNillableTestCount(i *int) *SubmissionUpdate {
	if i != nil {
		su.SetTestCount(*i)
	}
	return su
}

// AddTestCount adds i to the "test_count" field.
func (su *SubmissionUpdate) AddTestCount(i int) *SubmissionUpdate {
	su.mutation.AddTestCount(i)
	return su
}

// SetProblemID sets the "problem" edge to the Problem entity by ID.
func (su *SubmissionUpdate) SetProblemID(id int) *SubmissionUpdate {
	su.mutation.SetProblemID(id)
	return su
}

// SetProblem sets the "problem" edge to the Problem entity.
func (su *SubmissionUpdate) SetProblem(p *Problem) *SubmissionUpdate {
	return su.SetProblemID(p.ID)
}

// Mutation returns the SubmissionMutation object of the builder.
func (su *SubmissionUpdate) Mutation() *SubmissionMutation {
	return su.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (su *SubmissionUpdate) ClearProblem() *SubmissionUpdate {
	su.mutation.ClearProblem()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubmissionUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubmissionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubmissionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubmissionUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := submission.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubmissionUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := submission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Submission.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.Verdict(); ok {
		if err := submission.VerdictValidator(v); err != nil {
			return &ValidationError{Name: "verdict", err: fmt.Errorf(`ent: validator failed for field "Submission.verdict": %w`, err)}
		}
	}
	if v, ok := su.mutation.TestCount(); ok {
		if err := submission.TestCountValidator(v); err != nil {
			return &ValidationError{Name: "test_count", err: fmt.Errorf(`ent: validator failed for field "Submission.test_count": %w`, err)}
		}
	}
	if su.mutation.ProblemCleared() && len(su.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Submission.problem"`)
	}
	return nil
}

func (su *SubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(submission.Table, submission.Columns, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(submission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Verdict(); ok {
		_spec.SetField(submission.FieldVerdict, field.TypeEnum, value)
	}
	if value, ok := su.mutation.TestCount(); ok {
		_spec.SetField(submission.FieldTestCount, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedTestCount(); ok {
		_spec.AddField(submission.FieldTestCount, field.TypeInt, value)
	}
	if su.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemTable,
			Columns: []string{submission.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemTable,
			Columns: []string{submission.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubmissionUpdateOne is the builder for updating a single Submission entity.
type SubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubmissionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubmissionUpdateOne) SetUpdatedAt(t time.Time) *SubmissionUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubmissionUpdateOne) SetStatus(s submission.Status) *SubmissionUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableStatus(s *submission.Status) *SubmissionUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// SetVerdict sets the "verdict" field.
func (suo *SubmissionUpdateOne) SetVerdict(s submission.Verdict) *SubmissionUpdateOne {
	suo.mutation.SetVerdict(s)
	return suo
}

// SetNillableVerdict sets the "verdict" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableVerdict(s *submission.Verdict) *SubmissionUpdateOne {
	if s != nil {
		suo.SetVerdict(*s)
	}
	return suo
}

// SetTestCount sets the "test_count" field.
func (suo *SubmissionUpdateOne) SetTestCount(i int) *SubmissionUpdateOne {
	suo.mutation.ResetTestCount()
	suo.mutation.SetTestCount(i)
	return suo
}

// SetNillableTestCount sets the "test_count" field if the given value is not nil.
func (suo *SubmissionUpdateOne) SetNillableTestCount(i *int) *SubmissionUpdateOne {
	if i != nil {
		suo.SetTestCount(*i)
	}
	return suo
}

// AddTestCount adds i to the "test_count" field.
func (suo *SubmissionUpdateOne) AddTestCount(i int) *SubmissionUpdateOne {
	suo.mutation.AddTestCount(i)
	return suo
}

// SetProblemID sets the "problem" edge to the Problem entity by ID.
func (suo *SubmissionUpdateOne) SetProblemID(id int) *SubmissionUpdateOne {
	suo.mutation.SetProblemID(id)
	return suo
}

// SetProblem sets the "problem" edge to the Problem entity.
func (suo *SubmissionUpdateOne) SetProblem(p *Problem) *SubmissionUpdateOne {
	return suo.SetProblemID(p.ID)
}

// Mutation returns the SubmissionMutation object of the builder.
func (suo *SubmissionUpdateOne) Mutation() *SubmissionMutation {
	return suo.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (suo *SubmissionUpdateOne) ClearProblem() *SubmissionUpdateOne {
	suo.mutation.ClearProblem()
	return suo
}

// Where appends a list predicates to the SubmissionUpdate builder.
func (suo *SubmissionUpdateOne) Where(ps ...predicate.Submission) *SubmissionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubmissionUpdateOne) Select(field string, fields ...string) *SubmissionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Submission entity.
func (suo *SubmissionUpdateOne) Save(ctx context.Context) (*Submission, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubmissionUpdateOne) SaveX(ctx context.Context) *Submission {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubmissionUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := submission.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubmissionUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := submission.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Submission.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Verdict(); ok {
		if err := submission.VerdictValidator(v); err != nil {
			return &ValidationError{Name: "verdict", err: fmt.Errorf(`ent: validator failed for field "Submission.verdict": %w`, err)}
		}
	}
	if v, ok := suo.mutation.TestCount(); ok {
		if err := submission.TestCountValidator(v); err != nil {
			return &ValidationError{Name: "test_count", err: fmt.Errorf(`ent: validator failed for field "Submission.test_count": %w`, err)}
		}
	}
	if suo.mutation.ProblemCleared() && len(suo.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Submission.problem"`)
	}
	return nil
}

func (suo *SubmissionUpdateOne) sqlSave(ctx context.Context) (_node *Submission, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(submission.Table, submission.Columns, sqlgraph.NewFieldSpec(submission.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Submission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, submission.FieldID)
		for _, f := range fields {
			if !submission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != submission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(submission.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(submission.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Verdict(); ok {
		_spec.SetField(submission.FieldVerdict, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.TestCount(); ok {
		_spec.SetField(submission.FieldTestCount, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedTestCount(); ok {
		_spec.AddField(submission.FieldTestCount, field.TypeInt, value)
	}
	if suo.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemTable,
			Columns: []string{submission.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   submission.ProblemTable,
			Columns: []string{submission.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Submission{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{submission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
