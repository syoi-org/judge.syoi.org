// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/syoi-org/judy/ent/problem"
	"github.com/syoi-org/judy/ent/submission"
)

// Submission is the model entity for the Submission schema.
type Submission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status submission.Status `json:"status,omitempty"`
	// Verdict holds the value of the "verdict" field.
	Verdict submission.Verdict `json:"verdict,omitempty"`
	// TestCount holds the value of the "test_count" field.
	TestCount int `json:"test_count,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubmissionQuery when eager-loading is set.
	Edges               SubmissionEdges `json:"edges"`
	problem_submissions *int
	selectValues        sql.SelectValues
}

// SubmissionEdges holds the relations/edges for other nodes in the graph.
type SubmissionEdges struct {
	// Problem holds the value of the problem edge.
	Problem *Problem `json:"problem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProblemOrErr returns the Problem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubmissionEdges) ProblemOrErr() (*Problem, error) {
	if e.Problem != nil {
		return e.Problem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: problem.Label}
	}
	return nil, &NotLoadedError{edge: "problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Submission) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case submission.FieldID, submission.FieldTestCount:
			values[i] = new(sql.NullInt64)
		case submission.FieldStatus, submission.FieldVerdict:
			values[i] = new(sql.NullString)
		case submission.FieldCreatedAt, submission.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case submission.ForeignKeys[0]: // problem_submissions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Submission fields.
func (s *Submission) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case submission.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case submission.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = submission.Status(value.String)
			}
		case submission.FieldVerdict:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field verdict", values[i])
			} else if value.Valid {
				s.Verdict = submission.Verdict(value.String)
			}
		case submission.FieldTestCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field test_count", values[i])
			} else if value.Valid {
				s.TestCount = int(value.Int64)
			}
		case submission.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case submission.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case submission.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_submissions", value)
			} else if value.Valid {
				s.problem_submissions = new(int)
				*s.problem_submissions = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Submission.
// This includes values selected through modifiers, order, etc.
func (s *Submission) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryProblem queries the "problem" edge of the Submission entity.
func (s *Submission) QueryProblem() *ProblemQuery {
	return NewSubmissionClient(s.config).QueryProblem(s)
}

// Update returns a builder for updating this Submission.
// Note that you need to call Submission.Unwrap() before calling this method if this Submission
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Submission) Update() *SubmissionUpdateOne {
	return NewSubmissionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Submission entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Submission) Unwrap() *Submission {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Submission is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Submission) String() string {
	var builder strings.Builder
	builder.WriteString("Submission(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("verdict=")
	builder.WriteString(fmt.Sprintf("%v", s.Verdict))
	builder.WriteString(", ")
	builder.WriteString("test_count=")
	builder.WriteString(fmt.Sprintf("%v", s.TestCount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Submissions is a parsable slice of Submission.
type Submissions []*Submission
