// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syoi-org/judy/ent/judge"
	"github.com/syoi-org/judy/ent/predicate"
)

// JudgeDelete is the builder for deleting a Judge entity.
type JudgeDelete struct {
	config
	hooks    []Hook
	mutation *JudgeMutation
}

// Where appends a list predicates to the JudgeDelete builder.
func (jd *JudgeDelete) Where(ps ...predicate.Judge) *JudgeDelete {
	jd.mutation.Where(ps...)
	return jd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jd *JudgeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jd.sqlExec, jd.mutation, jd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jd *JudgeDelete) ExecX(ctx context.Context) int {
	n, err := jd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jd *JudgeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(judge.Table, sqlgraph.NewFieldSpec(judge.FieldID, field.TypeInt))
	if ps := jd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jd.mutation.done = true
	return affected, err
}

// JudgeDeleteOne is the builder for deleting a single Judge entity.
type JudgeDeleteOne struct {
	jd *JudgeDelete
}

// Where appends a list predicates to the JudgeDelete builder.
func (jdo *JudgeDeleteOne) Where(ps ...predicate.Judge) *JudgeDeleteOne {
	jdo.jd.mutation.Where(ps...)
	return jdo
}

// Exec executes the deletion query.
func (jdo *JudgeDeleteOne) Exec(ctx context.Context) error {
	n, err := jdo.jd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{judge.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jdo *JudgeDeleteOne) ExecX(ctx context.Context) {
	if err := jdo.Exec(ctx); err != nil {
		panic(err)
	}
}
