package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/syoi-org/judy/ent"
	"github.com/syoi-org/judy/ent/graph/generated"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Judges is the resolver for the judges field.
func (r *queryResolver) Judges(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) (*ent.JudgeConnection, error) {
	return r.client.Judge.Query().Paginate(ctx, after, first, before, last)
}

// Problems is the resolver for the problems field.
func (r *queryResolver) Problems(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) (*ent.ProblemConnection, error) {
	return r.client.Problem.Query().Paginate(ctx, after, first, before, last)
}

// Submissions is the resolver for the submissions field.
func (r *queryResolver) Submissions(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int) (*ent.SubmissionConnection, error) {
	return r.client.Submission.Query().Paginate(ctx, after, first, before, last)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
