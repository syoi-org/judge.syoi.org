// Code generated by ent, DO NOT EDIT.

package submission

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the submission type in the database.
	Label = "submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldVerdict holds the string denoting the verdict field in the database.
	FieldVerdict = "verdict"
	// FieldTestCount holds the string denoting the test_count field in the database.
	FieldTestCount = "test_count"
	// EdgeProblem holds the string denoting the problem edge name in mutations.
	EdgeProblem = "problem"
	// Table holds the table name of the submission in the database.
	Table = "submissions"
	// ProblemTable is the table that holds the problem relation/edge.
	ProblemTable = "submissions"
	// ProblemInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemInverseTable = "problems"
	// ProblemColumn is the table column denoting the problem relation/edge.
	ProblemColumn = "problem_submissions"
)

// Columns holds all SQL columns for submission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatus,
	FieldVerdict,
	FieldTestCount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "submissions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"problem_submissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTestCount holds the default value on creation for the "test_count" field.
	DefaultTestCount int
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending   Status = "pending"
	StatusCompiling Status = "compiling"
	StatusJudging   Status = "judging"
	StatusFinished  Status = "finished"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusCompiling, StatusJudging, StatusFinished:
		return nil
	default:
		return fmt.Errorf("submission: invalid enum value for status field: %q", s)
	}
}

// Verdict defines the type for the "verdict" enum field.
type Verdict string

// VerdictOK is the default value of the Verdict enum.
const DefaultVerdict = VerdictOK

// Verdict values.
const (
	VerdictOK      Verdict = "OK"
	VerdictTLE     Verdict = "TLE"
	VerdictMLE     Verdict = "MLE"
	VerdictILE     Verdict = "ILE"
	VerdictWA      Verdict = "WA"
	VerdictCE      Verdict = "CE"
	VerdictRE      Verdict = "RE"
	VerdictPE      Verdict = "PE"
	VerdictCRASHED Verdict = "CRASHED"
	VerdictOTHER   Verdict = "OTHER"
)

func (v Verdict) String() string {
	return string(v)
}

// VerdictValidator is a validator for the "verdict" field enum values. It is called by the builders before save.
func VerdictValidator(v Verdict) error {
	switch v {
	case VerdictOK, VerdictTLE, VerdictMLE, VerdictILE, VerdictWA, VerdictCE, VerdictRE, VerdictPE, VerdictCRASHED, VerdictOTHER:
		return nil
	default:
		return fmt.Errorf("submission: invalid enum value for verdict field: %q", v)
	}
}

// OrderOption defines the ordering options for the Submission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByVerdict orders the results by the verdict field.
func ByVerdict(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVerdict, opts...).ToFunc()
}

// ByTestCount orders the results by the test_count field.
func ByTestCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTestCount, opts...).ToFunc()
}

// ByProblemField orders the results by problem field.
func ByProblemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemStep(), sql.OrderByField(field, opts...))
	}
}
func newProblemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProblemTable, ProblemColumn),
	)
}
