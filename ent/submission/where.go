// Code generated by ent, DO NOT EDIT.

package submission

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/syoi-org/judy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldID, id))
}

// TestCount applies equality check predicate on the "test_count" field. It's identical to TestCountEQ.
func TestCount(v int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldTestCount, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldStatus, vs...))
}

// VerdictEQ applies the EQ predicate on the "verdict" field.
func VerdictEQ(v Verdict) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldVerdict, v))
}

// VerdictNEQ applies the NEQ predicate on the "verdict" field.
func VerdictNEQ(v Verdict) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldVerdict, v))
}

// VerdictIn applies the In predicate on the "verdict" field.
func VerdictIn(vs ...Verdict) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldVerdict, vs...))
}

// VerdictNotIn applies the NotIn predicate on the "verdict" field.
func VerdictNotIn(vs ...Verdict) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldVerdict, vs...))
}

// TestCountEQ applies the EQ predicate on the "test_count" field.
func TestCountEQ(v int) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldTestCount, v))
}

// TestCountNEQ applies the NEQ predicate on the "test_count" field.
func TestCountNEQ(v int) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldTestCount, v))
}

// TestCountIn applies the In predicate on the "test_count" field.
func TestCountIn(vs ...int) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldTestCount, vs...))
}

// TestCountNotIn applies the NotIn predicate on the "test_count" field.
func TestCountNotIn(vs ...int) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldTestCount, vs...))
}

// TestCountGT applies the GT predicate on the "test_count" field.
func TestCountGT(v int) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldTestCount, v))
}

// TestCountGTE applies the GTE predicate on the "test_count" field.
func TestCountGTE(v int) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldTestCount, v))
}

// TestCountLT applies the LT predicate on the "test_count" field.
func TestCountLT(v int) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldTestCount, v))
}

// TestCountLTE applies the LTE predicate on the "test_count" field.
func TestCountLTE(v int) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldTestCount, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Submission {
	return predicate.Submission(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasProblem applies the HasEdge predicate on the "problem" edge.
func HasProblem() predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProblemTable, ProblemColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProblemWith applies the HasEdge predicate on the "problem" edge with a given conditions (other predicates).
func HasProblemWith(preds ...predicate.Problem) predicate.Submission {
	return predicate.Submission(func(s *sql.Selector) {
		step := newProblemStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Submission) predicate.Submission {
	return predicate.Submission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Submission) predicate.Submission {
	return predicate.Submission(sql.NotPredicates(p))
}
