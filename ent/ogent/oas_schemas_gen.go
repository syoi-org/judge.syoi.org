// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

type CreateJudgeReq struct {
	CreatedAt     time.Time          `json:"created_at"`
	UpdatedAt     time.Time          `json:"updated_at"`
	Name          string             `json:"name"`
	Code          string             `json:"code"`
	Type          CreateJudgeReqType `json:"type"`
	Configuration string             `json:"configuration"`
	Problems      []int              `json:"problems"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateJudgeReq) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CreateJudgeReq) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *CreateJudgeReq) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *CreateJudgeReq) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *CreateJudgeReq) GetType() CreateJudgeReqType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *CreateJudgeReq) GetConfiguration() string {
	return s.Configuration
}

// GetProblems returns the value of Problems.
func (s *CreateJudgeReq) GetProblems() []int {
	return s.Problems
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateJudgeReq) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CreateJudgeReq) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *CreateJudgeReq) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *CreateJudgeReq) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *CreateJudgeReq) SetType(val CreateJudgeReqType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *CreateJudgeReq) SetConfiguration(val string) {
	s.Configuration = val
}

// SetProblems sets the value of Problems.
func (s *CreateJudgeReq) SetProblems(val []int) {
	s.Problems = val
}

type CreateJudgeReqType string

const (
	CreateJudgeReqTypeLocal      CreateJudgeReqType = "local"
	CreateJudgeReqTypeCodeforces CreateJudgeReqType = "codeforces"
	CreateJudgeReqTypeVjudge     CreateJudgeReqType = "vjudge"
	CreateJudgeReqTypeSyoj       CreateJudgeReqType = "syoj"
	CreateJudgeReqTypeNoop       CreateJudgeReqType = "noop"
)

// AllValues returns all CreateJudgeReqType values.
func (CreateJudgeReqType) AllValues() []CreateJudgeReqType {
	return []CreateJudgeReqType{
		CreateJudgeReqTypeLocal,
		CreateJudgeReqTypeCodeforces,
		CreateJudgeReqTypeVjudge,
		CreateJudgeReqTypeSyoj,
		CreateJudgeReqTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateJudgeReqType) MarshalText() ([]byte, error) {
	switch s {
	case CreateJudgeReqTypeLocal:
		return []byte(s), nil
	case CreateJudgeReqTypeCodeforces:
		return []byte(s), nil
	case CreateJudgeReqTypeVjudge:
		return []byte(s), nil
	case CreateJudgeReqTypeSyoj:
		return []byte(s), nil
	case CreateJudgeReqTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateJudgeReqType) UnmarshalText(data []byte) error {
	switch CreateJudgeReqType(data) {
	case CreateJudgeReqTypeLocal:
		*s = CreateJudgeReqTypeLocal
		return nil
	case CreateJudgeReqTypeCodeforces:
		*s = CreateJudgeReqTypeCodeforces
		return nil
	case CreateJudgeReqTypeVjudge:
		*s = CreateJudgeReqTypeVjudge
		return nil
	case CreateJudgeReqTypeSyoj:
		*s = CreateJudgeReqTypeSyoj
		return nil
	case CreateJudgeReqTypeNoop:
		*s = CreateJudgeReqTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateProblemReq struct {
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	Name        string    `json:"name"`
	Code        string    `json:"code"`
	Submissions []int     `json:"submissions"`
	Judge       int       `json:"judge"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateProblemReq) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CreateProblemReq) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *CreateProblemReq) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *CreateProblemReq) GetCode() string {
	return s.Code
}

// GetSubmissions returns the value of Submissions.
func (s *CreateProblemReq) GetSubmissions() []int {
	return s.Submissions
}

// GetJudge returns the value of Judge.
func (s *CreateProblemReq) GetJudge() int {
	return s.Judge
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateProblemReq) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CreateProblemReq) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *CreateProblemReq) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *CreateProblemReq) SetCode(val string) {
	s.Code = val
}

// SetSubmissions sets the value of Submissions.
func (s *CreateProblemReq) SetSubmissions(val []int) {
	s.Submissions = val
}

// SetJudge sets the value of Judge.
func (s *CreateProblemReq) SetJudge(val int) {
	s.Judge = val
}

type CreateSubmissionReq struct {
	CreatedAt time.Time                  `json:"created_at"`
	UpdatedAt time.Time                  `json:"updated_at"`
	Status    CreateSubmissionReqStatus  `json:"status"`
	Verdict   CreateSubmissionReqVerdict `json:"verdict"`
	TestCount int                        `json:"test_count"`
	Problem   int                        `json:"problem"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *CreateSubmissionReq) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CreateSubmissionReq) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *CreateSubmissionReq) GetStatus() CreateSubmissionReqStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *CreateSubmissionReq) GetVerdict() CreateSubmissionReqVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *CreateSubmissionReq) GetTestCount() int {
	return s.TestCount
}

// GetProblem returns the value of Problem.
func (s *CreateSubmissionReq) GetProblem() int {
	return s.Problem
}

// SetCreatedAt sets the value of CreatedAt.
func (s *CreateSubmissionReq) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CreateSubmissionReq) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *CreateSubmissionReq) SetStatus(val CreateSubmissionReqStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *CreateSubmissionReq) SetVerdict(val CreateSubmissionReqVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *CreateSubmissionReq) SetTestCount(val int) {
	s.TestCount = val
}

// SetProblem sets the value of Problem.
func (s *CreateSubmissionReq) SetProblem(val int) {
	s.Problem = val
}

type CreateSubmissionReqStatus string

const (
	CreateSubmissionReqStatusPending   CreateSubmissionReqStatus = "pending"
	CreateSubmissionReqStatusCompiling CreateSubmissionReqStatus = "compiling"
	CreateSubmissionReqStatusJudging   CreateSubmissionReqStatus = "judging"
	CreateSubmissionReqStatusFinished  CreateSubmissionReqStatus = "finished"
)

// AllValues returns all CreateSubmissionReqStatus values.
func (CreateSubmissionReqStatus) AllValues() []CreateSubmissionReqStatus {
	return []CreateSubmissionReqStatus{
		CreateSubmissionReqStatusPending,
		CreateSubmissionReqStatusCompiling,
		CreateSubmissionReqStatusJudging,
		CreateSubmissionReqStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateSubmissionReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case CreateSubmissionReqStatusPending:
		return []byte(s), nil
	case CreateSubmissionReqStatusCompiling:
		return []byte(s), nil
	case CreateSubmissionReqStatusJudging:
		return []byte(s), nil
	case CreateSubmissionReqStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateSubmissionReqStatus) UnmarshalText(data []byte) error {
	switch CreateSubmissionReqStatus(data) {
	case CreateSubmissionReqStatusPending:
		*s = CreateSubmissionReqStatusPending
		return nil
	case CreateSubmissionReqStatusCompiling:
		*s = CreateSubmissionReqStatusCompiling
		return nil
	case CreateSubmissionReqStatusJudging:
		*s = CreateSubmissionReqStatusJudging
		return nil
	case CreateSubmissionReqStatusFinished:
		*s = CreateSubmissionReqStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateSubmissionReqVerdict string

const (
	CreateSubmissionReqVerdictOK      CreateSubmissionReqVerdict = "OK"
	CreateSubmissionReqVerdictTLE     CreateSubmissionReqVerdict = "TLE"
	CreateSubmissionReqVerdictMLE     CreateSubmissionReqVerdict = "MLE"
	CreateSubmissionReqVerdictILE     CreateSubmissionReqVerdict = "ILE"
	CreateSubmissionReqVerdictWA      CreateSubmissionReqVerdict = "WA"
	CreateSubmissionReqVerdictCE      CreateSubmissionReqVerdict = "CE"
	CreateSubmissionReqVerdictRE      CreateSubmissionReqVerdict = "RE"
	CreateSubmissionReqVerdictPE      CreateSubmissionReqVerdict = "PE"
	CreateSubmissionReqVerdictCRASHED CreateSubmissionReqVerdict = "CRASHED"
	CreateSubmissionReqVerdictOTHER   CreateSubmissionReqVerdict = "OTHER"
)

// AllValues returns all CreateSubmissionReqVerdict values.
func (CreateSubmissionReqVerdict) AllValues() []CreateSubmissionReqVerdict {
	return []CreateSubmissionReqVerdict{
		CreateSubmissionReqVerdictOK,
		CreateSubmissionReqVerdictTLE,
		CreateSubmissionReqVerdictMLE,
		CreateSubmissionReqVerdictILE,
		CreateSubmissionReqVerdictWA,
		CreateSubmissionReqVerdictCE,
		CreateSubmissionReqVerdictRE,
		CreateSubmissionReqVerdictPE,
		CreateSubmissionReqVerdictCRASHED,
		CreateSubmissionReqVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateSubmissionReqVerdict) MarshalText() ([]byte, error) {
	switch s {
	case CreateSubmissionReqVerdictOK:
		return []byte(s), nil
	case CreateSubmissionReqVerdictTLE:
		return []byte(s), nil
	case CreateSubmissionReqVerdictMLE:
		return []byte(s), nil
	case CreateSubmissionReqVerdictILE:
		return []byte(s), nil
	case CreateSubmissionReqVerdictWA:
		return []byte(s), nil
	case CreateSubmissionReqVerdictCE:
		return []byte(s), nil
	case CreateSubmissionReqVerdictRE:
		return []byte(s), nil
	case CreateSubmissionReqVerdictPE:
		return []byte(s), nil
	case CreateSubmissionReqVerdictCRASHED:
		return []byte(s), nil
	case CreateSubmissionReqVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateSubmissionReqVerdict) UnmarshalText(data []byte) error {
	switch CreateSubmissionReqVerdict(data) {
	case CreateSubmissionReqVerdictOK:
		*s = CreateSubmissionReqVerdictOK
		return nil
	case CreateSubmissionReqVerdictTLE:
		*s = CreateSubmissionReqVerdictTLE
		return nil
	case CreateSubmissionReqVerdictMLE:
		*s = CreateSubmissionReqVerdictMLE
		return nil
	case CreateSubmissionReqVerdictILE:
		*s = CreateSubmissionReqVerdictILE
		return nil
	case CreateSubmissionReqVerdictWA:
		*s = CreateSubmissionReqVerdictWA
		return nil
	case CreateSubmissionReqVerdictCE:
		*s = CreateSubmissionReqVerdictCE
		return nil
	case CreateSubmissionReqVerdictRE:
		*s = CreateSubmissionReqVerdictRE
		return nil
	case CreateSubmissionReqVerdictPE:
		*s = CreateSubmissionReqVerdictPE
		return nil
	case CreateSubmissionReqVerdictCRASHED:
		*s = CreateSubmissionReqVerdictCRASHED
		return nil
	case CreateSubmissionReqVerdictOTHER:
		*s = CreateSubmissionReqVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DeleteJudgeNoContent is response for DeleteJudge operation.
type DeleteJudgeNoContent struct{}

func (*DeleteJudgeNoContent) deleteJudgeRes() {}

// DeleteProblemNoContent is response for DeleteProblem operation.
type DeleteProblemNoContent struct{}

func (*DeleteProblemNoContent) deleteProblemRes() {}

// DeleteSubmissionNoContent is response for DeleteSubmission operation.
type DeleteSubmissionNoContent struct{}

func (*DeleteSubmissionNoContent) deleteSubmissionRes() {}

type HealthCheckOK HealthCheckResult

func (*HealthCheckOK) healthCheckRes() {}

// Result of health check.
// Ref: #/components/schemas/HealthCheckResult
type HealthCheckResult struct {
	Status HealthCheckResultStatus `json:"status"`
	Uptime string                  `json:"uptime"`
	Errors jx.Raw                  `json:"errors"`
}

// GetStatus returns the value of Status.
func (s *HealthCheckResult) GetStatus() HealthCheckResultStatus {
	return s.Status
}

// GetUptime returns the value of Uptime.
func (s *HealthCheckResult) GetUptime() string {
	return s.Uptime
}

// GetErrors returns the value of Errors.
func (s *HealthCheckResult) GetErrors() jx.Raw {
	return s.Errors
}

// SetStatus sets the value of Status.
func (s *HealthCheckResult) SetStatus(val HealthCheckResultStatus) {
	s.Status = val
}

// SetUptime sets the value of Uptime.
func (s *HealthCheckResult) SetUptime(val string) {
	s.Uptime = val
}

// SetErrors sets the value of Errors.
func (s *HealthCheckResult) SetErrors(val jx.Raw) {
	s.Errors = val
}

type HealthCheckResultStatus string

const (
	HealthCheckResultStatusOk    HealthCheckResultStatus = "ok"
	HealthCheckResultStatusError HealthCheckResultStatus = "error"
)

// AllValues returns all HealthCheckResultStatus values.
func (HealthCheckResultStatus) AllValues() []HealthCheckResultStatus {
	return []HealthCheckResultStatus{
		HealthCheckResultStatusOk,
		HealthCheckResultStatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s HealthCheckResultStatus) MarshalText() ([]byte, error) {
	switch s {
	case HealthCheckResultStatusOk:
		return []byte(s), nil
	case HealthCheckResultStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *HealthCheckResultStatus) UnmarshalText(data []byte) error {
	switch HealthCheckResultStatus(data) {
	case HealthCheckResultStatusOk:
		*s = HealthCheckResultStatusOk
		return nil
	case HealthCheckResultStatusError:
		*s = HealthCheckResultStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type HealthCheckServiceUnavailable HealthCheckResult

func (*HealthCheckServiceUnavailable) healthCheckRes() {}

// Ref: #/components/schemas/JudgeCreate
type JudgeCreate struct {
	ID            int             `json:"id"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
	Name          string          `json:"name"`
	Code          string          `json:"code"`
	Type          JudgeCreateType `json:"type"`
	Configuration string          `json:"configuration"`
}

// GetID returns the value of ID.
func (s *JudgeCreate) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *JudgeCreate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *JudgeCreate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *JudgeCreate) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *JudgeCreate) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *JudgeCreate) GetType() JudgeCreateType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *JudgeCreate) GetConfiguration() string {
	return s.Configuration
}

// SetID sets the value of ID.
func (s *JudgeCreate) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *JudgeCreate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *JudgeCreate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *JudgeCreate) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *JudgeCreate) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *JudgeCreate) SetType(val JudgeCreateType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *JudgeCreate) SetConfiguration(val string) {
	s.Configuration = val
}

func (*JudgeCreate) createJudgeRes() {}

type JudgeCreateType string

const (
	JudgeCreateTypeLocal      JudgeCreateType = "local"
	JudgeCreateTypeCodeforces JudgeCreateType = "codeforces"
	JudgeCreateTypeVjudge     JudgeCreateType = "vjudge"
	JudgeCreateTypeSyoj       JudgeCreateType = "syoj"
	JudgeCreateTypeNoop       JudgeCreateType = "noop"
)

// AllValues returns all JudgeCreateType values.
func (JudgeCreateType) AllValues() []JudgeCreateType {
	return []JudgeCreateType{
		JudgeCreateTypeLocal,
		JudgeCreateTypeCodeforces,
		JudgeCreateTypeVjudge,
		JudgeCreateTypeSyoj,
		JudgeCreateTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JudgeCreateType) MarshalText() ([]byte, error) {
	switch s {
	case JudgeCreateTypeLocal:
		return []byte(s), nil
	case JudgeCreateTypeCodeforces:
		return []byte(s), nil
	case JudgeCreateTypeVjudge:
		return []byte(s), nil
	case JudgeCreateTypeSyoj:
		return []byte(s), nil
	case JudgeCreateTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JudgeCreateType) UnmarshalText(data []byte) error {
	switch JudgeCreateType(data) {
	case JudgeCreateTypeLocal:
		*s = JudgeCreateTypeLocal
		return nil
	case JudgeCreateTypeCodeforces:
		*s = JudgeCreateTypeCodeforces
		return nil
	case JudgeCreateTypeVjudge:
		*s = JudgeCreateTypeVjudge
		return nil
	case JudgeCreateTypeSyoj:
		*s = JudgeCreateTypeSyoj
		return nil
	case JudgeCreateTypeNoop:
		*s = JudgeCreateTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JudgeList
type JudgeList struct {
	ID            int           `json:"id"`
	CreatedAt     time.Time     `json:"created_at"`
	UpdatedAt     time.Time     `json:"updated_at"`
	Name          string        `json:"name"`
	Code          string        `json:"code"`
	Type          JudgeListType `json:"type"`
	Configuration string        `json:"configuration"`
}

// GetID returns the value of ID.
func (s *JudgeList) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *JudgeList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *JudgeList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *JudgeList) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *JudgeList) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *JudgeList) GetType() JudgeListType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *JudgeList) GetConfiguration() string {
	return s.Configuration
}

// SetID sets the value of ID.
func (s *JudgeList) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *JudgeList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *JudgeList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *JudgeList) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *JudgeList) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *JudgeList) SetType(val JudgeListType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *JudgeList) SetConfiguration(val string) {
	s.Configuration = val
}

type JudgeListType string

const (
	JudgeListTypeLocal      JudgeListType = "local"
	JudgeListTypeCodeforces JudgeListType = "codeforces"
	JudgeListTypeVjudge     JudgeListType = "vjudge"
	JudgeListTypeSyoj       JudgeListType = "syoj"
	JudgeListTypeNoop       JudgeListType = "noop"
)

// AllValues returns all JudgeListType values.
func (JudgeListType) AllValues() []JudgeListType {
	return []JudgeListType{
		JudgeListTypeLocal,
		JudgeListTypeCodeforces,
		JudgeListTypeVjudge,
		JudgeListTypeSyoj,
		JudgeListTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JudgeListType) MarshalText() ([]byte, error) {
	switch s {
	case JudgeListTypeLocal:
		return []byte(s), nil
	case JudgeListTypeCodeforces:
		return []byte(s), nil
	case JudgeListTypeVjudge:
		return []byte(s), nil
	case JudgeListTypeSyoj:
		return []byte(s), nil
	case JudgeListTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JudgeListType) UnmarshalText(data []byte) error {
	switch JudgeListType(data) {
	case JudgeListTypeLocal:
		*s = JudgeListTypeLocal
		return nil
	case JudgeListTypeCodeforces:
		*s = JudgeListTypeCodeforces
		return nil
	case JudgeListTypeVjudge:
		*s = JudgeListTypeVjudge
		return nil
	case JudgeListTypeSyoj:
		*s = JudgeListTypeSyoj
		return nil
	case JudgeListTypeNoop:
		*s = JudgeListTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Judge_ProblemsList
type JudgeProblemsList struct {
	ID        int       `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
}

// GetID returns the value of ID.
func (s *JudgeProblemsList) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *JudgeProblemsList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *JudgeProblemsList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *JudgeProblemsList) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *JudgeProblemsList) GetCode() string {
	return s.Code
}

// SetID sets the value of ID.
func (s *JudgeProblemsList) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *JudgeProblemsList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *JudgeProblemsList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *JudgeProblemsList) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *JudgeProblemsList) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/JudgeRead
type JudgeRead struct {
	ID            int           `json:"id"`
	CreatedAt     time.Time     `json:"created_at"`
	UpdatedAt     time.Time     `json:"updated_at"`
	Name          string        `json:"name"`
	Code          string        `json:"code"`
	Type          JudgeReadType `json:"type"`
	Configuration string        `json:"configuration"`
}

// GetID returns the value of ID.
func (s *JudgeRead) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *JudgeRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *JudgeRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *JudgeRead) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *JudgeRead) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *JudgeRead) GetType() JudgeReadType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *JudgeRead) GetConfiguration() string {
	return s.Configuration
}

// SetID sets the value of ID.
func (s *JudgeRead) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *JudgeRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *JudgeRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *JudgeRead) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *JudgeRead) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *JudgeRead) SetType(val JudgeReadType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *JudgeRead) SetConfiguration(val string) {
	s.Configuration = val
}

func (*JudgeRead) readJudgeRes() {}

type JudgeReadType string

const (
	JudgeReadTypeLocal      JudgeReadType = "local"
	JudgeReadTypeCodeforces JudgeReadType = "codeforces"
	JudgeReadTypeVjudge     JudgeReadType = "vjudge"
	JudgeReadTypeSyoj       JudgeReadType = "syoj"
	JudgeReadTypeNoop       JudgeReadType = "noop"
)

// AllValues returns all JudgeReadType values.
func (JudgeReadType) AllValues() []JudgeReadType {
	return []JudgeReadType{
		JudgeReadTypeLocal,
		JudgeReadTypeCodeforces,
		JudgeReadTypeVjudge,
		JudgeReadTypeSyoj,
		JudgeReadTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JudgeReadType) MarshalText() ([]byte, error) {
	switch s {
	case JudgeReadTypeLocal:
		return []byte(s), nil
	case JudgeReadTypeCodeforces:
		return []byte(s), nil
	case JudgeReadTypeVjudge:
		return []byte(s), nil
	case JudgeReadTypeSyoj:
		return []byte(s), nil
	case JudgeReadTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JudgeReadType) UnmarshalText(data []byte) error {
	switch JudgeReadType(data) {
	case JudgeReadTypeLocal:
		*s = JudgeReadTypeLocal
		return nil
	case JudgeReadTypeCodeforces:
		*s = JudgeReadTypeCodeforces
		return nil
	case JudgeReadTypeVjudge:
		*s = JudgeReadTypeVjudge
		return nil
	case JudgeReadTypeSyoj:
		*s = JudgeReadTypeSyoj
		return nil
	case JudgeReadTypeNoop:
		*s = JudgeReadTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/JudgeUpdate
type JudgeUpdate struct {
	ID            int             `json:"id"`
	CreatedAt     time.Time       `json:"created_at"`
	UpdatedAt     time.Time       `json:"updated_at"`
	Name          string          `json:"name"`
	Code          string          `json:"code"`
	Type          JudgeUpdateType `json:"type"`
	Configuration string          `json:"configuration"`
}

// GetID returns the value of ID.
func (s *JudgeUpdate) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *JudgeUpdate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *JudgeUpdate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *JudgeUpdate) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *JudgeUpdate) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *JudgeUpdate) GetType() JudgeUpdateType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *JudgeUpdate) GetConfiguration() string {
	return s.Configuration
}

// SetID sets the value of ID.
func (s *JudgeUpdate) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *JudgeUpdate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *JudgeUpdate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *JudgeUpdate) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *JudgeUpdate) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *JudgeUpdate) SetType(val JudgeUpdateType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *JudgeUpdate) SetConfiguration(val string) {
	s.Configuration = val
}

func (*JudgeUpdate) updateJudgeRes() {}

type JudgeUpdateType string

const (
	JudgeUpdateTypeLocal      JudgeUpdateType = "local"
	JudgeUpdateTypeCodeforces JudgeUpdateType = "codeforces"
	JudgeUpdateTypeVjudge     JudgeUpdateType = "vjudge"
	JudgeUpdateTypeSyoj       JudgeUpdateType = "syoj"
	JudgeUpdateTypeNoop       JudgeUpdateType = "noop"
)

// AllValues returns all JudgeUpdateType values.
func (JudgeUpdateType) AllValues() []JudgeUpdateType {
	return []JudgeUpdateType{
		JudgeUpdateTypeLocal,
		JudgeUpdateTypeCodeforces,
		JudgeUpdateTypeVjudge,
		JudgeUpdateTypeSyoj,
		JudgeUpdateTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s JudgeUpdateType) MarshalText() ([]byte, error) {
	switch s {
	case JudgeUpdateTypeLocal:
		return []byte(s), nil
	case JudgeUpdateTypeCodeforces:
		return []byte(s), nil
	case JudgeUpdateTypeVjudge:
		return []byte(s), nil
	case JudgeUpdateTypeSyoj:
		return []byte(s), nil
	case JudgeUpdateTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *JudgeUpdateType) UnmarshalText(data []byte) error {
	switch JudgeUpdateType(data) {
	case JudgeUpdateTypeLocal:
		*s = JudgeUpdateTypeLocal
		return nil
	case JudgeUpdateTypeCodeforces:
		*s = JudgeUpdateTypeCodeforces
		return nil
	case JudgeUpdateTypeVjudge:
		*s = JudgeUpdateTypeVjudge
		return nil
	case JudgeUpdateTypeSyoj:
		*s = JudgeUpdateTypeSyoj
		return nil
	case JudgeUpdateTypeNoop:
		*s = JudgeUpdateTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListJudgeOKApplicationJSON []JudgeList

func (*ListJudgeOKApplicationJSON) listJudgeRes() {}

type ListJudgeProblemsOKApplicationJSON []JudgeProblemsList

func (*ListJudgeProblemsOKApplicationJSON) listJudgeProblemsRes() {}

type ListProblemOKApplicationJSON []ProblemList

func (*ListProblemOKApplicationJSON) listProblemRes() {}

type ListProblemSubmissionsOKApplicationJSON []ProblemSubmissionsList

func (*ListProblemSubmissionsOKApplicationJSON) listProblemSubmissionsRes() {}

type ListSubmissionOKApplicationJSON []SubmissionList

func (*ListSubmissionOKApplicationJSON) listSubmissionRes() {}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateJudgeReqType returns new OptUpdateJudgeReqType with value set to v.
func NewOptUpdateJudgeReqType(v UpdateJudgeReqType) OptUpdateJudgeReqType {
	return OptUpdateJudgeReqType{
		Value: v,
		Set:   true,
	}
}

// OptUpdateJudgeReqType is optional UpdateJudgeReqType.
type OptUpdateJudgeReqType struct {
	Value UpdateJudgeReqType
	Set   bool
}

// IsSet returns true if OptUpdateJudgeReqType was set.
func (o OptUpdateJudgeReqType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateJudgeReqType) Reset() {
	var v UpdateJudgeReqType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateJudgeReqType) SetTo(v UpdateJudgeReqType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateJudgeReqType) Get() (v UpdateJudgeReqType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateJudgeReqType) Or(d UpdateJudgeReqType) UpdateJudgeReqType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateSubmissionReqStatus returns new OptUpdateSubmissionReqStatus with value set to v.
func NewOptUpdateSubmissionReqStatus(v UpdateSubmissionReqStatus) OptUpdateSubmissionReqStatus {
	return OptUpdateSubmissionReqStatus{
		Value: v,
		Set:   true,
	}
}

// OptUpdateSubmissionReqStatus is optional UpdateSubmissionReqStatus.
type OptUpdateSubmissionReqStatus struct {
	Value UpdateSubmissionReqStatus
	Set   bool
}

// IsSet returns true if OptUpdateSubmissionReqStatus was set.
func (o OptUpdateSubmissionReqStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateSubmissionReqStatus) Reset() {
	var v UpdateSubmissionReqStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateSubmissionReqStatus) SetTo(v UpdateSubmissionReqStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateSubmissionReqStatus) Get() (v UpdateSubmissionReqStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateSubmissionReqStatus) Or(d UpdateSubmissionReqStatus) UpdateSubmissionReqStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdateSubmissionReqVerdict returns new OptUpdateSubmissionReqVerdict with value set to v.
func NewOptUpdateSubmissionReqVerdict(v UpdateSubmissionReqVerdict) OptUpdateSubmissionReqVerdict {
	return OptUpdateSubmissionReqVerdict{
		Value: v,
		Set:   true,
	}
}

// OptUpdateSubmissionReqVerdict is optional UpdateSubmissionReqVerdict.
type OptUpdateSubmissionReqVerdict struct {
	Value UpdateSubmissionReqVerdict
	Set   bool
}

// IsSet returns true if OptUpdateSubmissionReqVerdict was set.
func (o OptUpdateSubmissionReqVerdict) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdateSubmissionReqVerdict) Reset() {
	var v UpdateSubmissionReqVerdict
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdateSubmissionReqVerdict) SetTo(v UpdateSubmissionReqVerdict) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdateSubmissionReqVerdict) Get() (v UpdateSubmissionReqVerdict, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdateSubmissionReqVerdict) Or(d UpdateSubmissionReqVerdict) UpdateSubmissionReqVerdict {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/ProblemCreate
type ProblemCreate struct {
	ID        int       `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
}

// GetID returns the value of ID.
func (s *ProblemCreate) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProblemCreate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProblemCreate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ProblemCreate) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ProblemCreate) GetCode() string {
	return s.Code
}

// SetID sets the value of ID.
func (s *ProblemCreate) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProblemCreate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProblemCreate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ProblemCreate) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ProblemCreate) SetCode(val string) {
	s.Code = val
}

func (*ProblemCreate) createProblemRes() {}

// Ref: #/components/schemas/Problem_JudgeRead
type ProblemJudgeRead struct {
	ID            int                  `json:"id"`
	CreatedAt     time.Time            `json:"created_at"`
	UpdatedAt     time.Time            `json:"updated_at"`
	Name          string               `json:"name"`
	Code          string               `json:"code"`
	Type          ProblemJudgeReadType `json:"type"`
	Configuration string               `json:"configuration"`
}

// GetID returns the value of ID.
func (s *ProblemJudgeRead) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProblemJudgeRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProblemJudgeRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ProblemJudgeRead) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ProblemJudgeRead) GetCode() string {
	return s.Code
}

// GetType returns the value of Type.
func (s *ProblemJudgeRead) GetType() ProblemJudgeReadType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *ProblemJudgeRead) GetConfiguration() string {
	return s.Configuration
}

// SetID sets the value of ID.
func (s *ProblemJudgeRead) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProblemJudgeRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProblemJudgeRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ProblemJudgeRead) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ProblemJudgeRead) SetCode(val string) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *ProblemJudgeRead) SetType(val ProblemJudgeReadType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *ProblemJudgeRead) SetConfiguration(val string) {
	s.Configuration = val
}

func (*ProblemJudgeRead) readProblemJudgeRes() {}

type ProblemJudgeReadType string

const (
	ProblemJudgeReadTypeLocal      ProblemJudgeReadType = "local"
	ProblemJudgeReadTypeCodeforces ProblemJudgeReadType = "codeforces"
	ProblemJudgeReadTypeVjudge     ProblemJudgeReadType = "vjudge"
	ProblemJudgeReadTypeSyoj       ProblemJudgeReadType = "syoj"
	ProblemJudgeReadTypeNoop       ProblemJudgeReadType = "noop"
)

// AllValues returns all ProblemJudgeReadType values.
func (ProblemJudgeReadType) AllValues() []ProblemJudgeReadType {
	return []ProblemJudgeReadType{
		ProblemJudgeReadTypeLocal,
		ProblemJudgeReadTypeCodeforces,
		ProblemJudgeReadTypeVjudge,
		ProblemJudgeReadTypeSyoj,
		ProblemJudgeReadTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProblemJudgeReadType) MarshalText() ([]byte, error) {
	switch s {
	case ProblemJudgeReadTypeLocal:
		return []byte(s), nil
	case ProblemJudgeReadTypeCodeforces:
		return []byte(s), nil
	case ProblemJudgeReadTypeVjudge:
		return []byte(s), nil
	case ProblemJudgeReadTypeSyoj:
		return []byte(s), nil
	case ProblemJudgeReadTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProblemJudgeReadType) UnmarshalText(data []byte) error {
	switch ProblemJudgeReadType(data) {
	case ProblemJudgeReadTypeLocal:
		*s = ProblemJudgeReadTypeLocal
		return nil
	case ProblemJudgeReadTypeCodeforces:
		*s = ProblemJudgeReadTypeCodeforces
		return nil
	case ProblemJudgeReadTypeVjudge:
		*s = ProblemJudgeReadTypeVjudge
		return nil
	case ProblemJudgeReadTypeSyoj:
		*s = ProblemJudgeReadTypeSyoj
		return nil
	case ProblemJudgeReadTypeNoop:
		*s = ProblemJudgeReadTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ProblemList
type ProblemList struct {
	ID        int       `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
}

// GetID returns the value of ID.
func (s *ProblemList) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProblemList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProblemList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ProblemList) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ProblemList) GetCode() string {
	return s.Code
}

// SetID sets the value of ID.
func (s *ProblemList) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProblemList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProblemList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ProblemList) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ProblemList) SetCode(val string) {
	s.Code = val
}

// Ref: #/components/schemas/ProblemRead
type ProblemRead struct {
	ID        int       `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
}

// GetID returns the value of ID.
func (s *ProblemRead) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProblemRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProblemRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ProblemRead) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ProblemRead) GetCode() string {
	return s.Code
}

// SetID sets the value of ID.
func (s *ProblemRead) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProblemRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProblemRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ProblemRead) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ProblemRead) SetCode(val string) {
	s.Code = val
}

func (*ProblemRead) readProblemRes() {}

// Ref: #/components/schemas/Problem_SubmissionsList
type ProblemSubmissionsList struct {
	ID        int                           `json:"id"`
	CreatedAt time.Time                     `json:"created_at"`
	UpdatedAt time.Time                     `json:"updated_at"`
	Status    ProblemSubmissionsListStatus  `json:"status"`
	Verdict   ProblemSubmissionsListVerdict `json:"verdict"`
	TestCount int                           `json:"test_count"`
}

// GetID returns the value of ID.
func (s *ProblemSubmissionsList) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProblemSubmissionsList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProblemSubmissionsList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *ProblemSubmissionsList) GetStatus() ProblemSubmissionsListStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *ProblemSubmissionsList) GetVerdict() ProblemSubmissionsListVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *ProblemSubmissionsList) GetTestCount() int {
	return s.TestCount
}

// SetID sets the value of ID.
func (s *ProblemSubmissionsList) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProblemSubmissionsList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProblemSubmissionsList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *ProblemSubmissionsList) SetStatus(val ProblemSubmissionsListStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *ProblemSubmissionsList) SetVerdict(val ProblemSubmissionsListVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *ProblemSubmissionsList) SetTestCount(val int) {
	s.TestCount = val
}

type ProblemSubmissionsListStatus string

const (
	ProblemSubmissionsListStatusPending   ProblemSubmissionsListStatus = "pending"
	ProblemSubmissionsListStatusCompiling ProblemSubmissionsListStatus = "compiling"
	ProblemSubmissionsListStatusJudging   ProblemSubmissionsListStatus = "judging"
	ProblemSubmissionsListStatusFinished  ProblemSubmissionsListStatus = "finished"
)

// AllValues returns all ProblemSubmissionsListStatus values.
func (ProblemSubmissionsListStatus) AllValues() []ProblemSubmissionsListStatus {
	return []ProblemSubmissionsListStatus{
		ProblemSubmissionsListStatusPending,
		ProblemSubmissionsListStatusCompiling,
		ProblemSubmissionsListStatusJudging,
		ProblemSubmissionsListStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProblemSubmissionsListStatus) MarshalText() ([]byte, error) {
	switch s {
	case ProblemSubmissionsListStatusPending:
		return []byte(s), nil
	case ProblemSubmissionsListStatusCompiling:
		return []byte(s), nil
	case ProblemSubmissionsListStatusJudging:
		return []byte(s), nil
	case ProblemSubmissionsListStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProblemSubmissionsListStatus) UnmarshalText(data []byte) error {
	switch ProblemSubmissionsListStatus(data) {
	case ProblemSubmissionsListStatusPending:
		*s = ProblemSubmissionsListStatusPending
		return nil
	case ProblemSubmissionsListStatusCompiling:
		*s = ProblemSubmissionsListStatusCompiling
		return nil
	case ProblemSubmissionsListStatusJudging:
		*s = ProblemSubmissionsListStatusJudging
		return nil
	case ProblemSubmissionsListStatusFinished:
		*s = ProblemSubmissionsListStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ProblemSubmissionsListVerdict string

const (
	ProblemSubmissionsListVerdictOK      ProblemSubmissionsListVerdict = "OK"
	ProblemSubmissionsListVerdictTLE     ProblemSubmissionsListVerdict = "TLE"
	ProblemSubmissionsListVerdictMLE     ProblemSubmissionsListVerdict = "MLE"
	ProblemSubmissionsListVerdictILE     ProblemSubmissionsListVerdict = "ILE"
	ProblemSubmissionsListVerdictWA      ProblemSubmissionsListVerdict = "WA"
	ProblemSubmissionsListVerdictCE      ProblemSubmissionsListVerdict = "CE"
	ProblemSubmissionsListVerdictRE      ProblemSubmissionsListVerdict = "RE"
	ProblemSubmissionsListVerdictPE      ProblemSubmissionsListVerdict = "PE"
	ProblemSubmissionsListVerdictCRASHED ProblemSubmissionsListVerdict = "CRASHED"
	ProblemSubmissionsListVerdictOTHER   ProblemSubmissionsListVerdict = "OTHER"
)

// AllValues returns all ProblemSubmissionsListVerdict values.
func (ProblemSubmissionsListVerdict) AllValues() []ProblemSubmissionsListVerdict {
	return []ProblemSubmissionsListVerdict{
		ProblemSubmissionsListVerdictOK,
		ProblemSubmissionsListVerdictTLE,
		ProblemSubmissionsListVerdictMLE,
		ProblemSubmissionsListVerdictILE,
		ProblemSubmissionsListVerdictWA,
		ProblemSubmissionsListVerdictCE,
		ProblemSubmissionsListVerdictRE,
		ProblemSubmissionsListVerdictPE,
		ProblemSubmissionsListVerdictCRASHED,
		ProblemSubmissionsListVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ProblemSubmissionsListVerdict) MarshalText() ([]byte, error) {
	switch s {
	case ProblemSubmissionsListVerdictOK:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictTLE:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictMLE:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictILE:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictWA:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictCE:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictRE:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictPE:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictCRASHED:
		return []byte(s), nil
	case ProblemSubmissionsListVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProblemSubmissionsListVerdict) UnmarshalText(data []byte) error {
	switch ProblemSubmissionsListVerdict(data) {
	case ProblemSubmissionsListVerdictOK:
		*s = ProblemSubmissionsListVerdictOK
		return nil
	case ProblemSubmissionsListVerdictTLE:
		*s = ProblemSubmissionsListVerdictTLE
		return nil
	case ProblemSubmissionsListVerdictMLE:
		*s = ProblemSubmissionsListVerdictMLE
		return nil
	case ProblemSubmissionsListVerdictILE:
		*s = ProblemSubmissionsListVerdictILE
		return nil
	case ProblemSubmissionsListVerdictWA:
		*s = ProblemSubmissionsListVerdictWA
		return nil
	case ProblemSubmissionsListVerdictCE:
		*s = ProblemSubmissionsListVerdictCE
		return nil
	case ProblemSubmissionsListVerdictRE:
		*s = ProblemSubmissionsListVerdictRE
		return nil
	case ProblemSubmissionsListVerdictPE:
		*s = ProblemSubmissionsListVerdictPE
		return nil
	case ProblemSubmissionsListVerdictCRASHED:
		*s = ProblemSubmissionsListVerdictCRASHED
		return nil
	case ProblemSubmissionsListVerdictOTHER:
		*s = ProblemSubmissionsListVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ProblemUpdate
type ProblemUpdate struct {
	ID        int       `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
}

// GetID returns the value of ID.
func (s *ProblemUpdate) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ProblemUpdate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *ProblemUpdate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *ProblemUpdate) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *ProblemUpdate) GetCode() string {
	return s.Code
}

// SetID sets the value of ID.
func (s *ProblemUpdate) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ProblemUpdate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *ProblemUpdate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *ProblemUpdate) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *ProblemUpdate) SetCode(val string) {
	s.Code = val
}

func (*ProblemUpdate) updateProblemRes() {}

type R400 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R400) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R400) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R400) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R400) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R400) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R400) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R400) createJudgeRes()            {}
func (*R400) createProblemRes()          {}
func (*R400) createSubmissionRes()       {}
func (*R400) deleteJudgeRes()            {}
func (*R400) deleteProblemRes()          {}
func (*R400) deleteSubmissionRes()       {}
func (*R400) listJudgeProblemsRes()      {}
func (*R400) listJudgeRes()              {}
func (*R400) listProblemRes()            {}
func (*R400) listProblemSubmissionsRes() {}
func (*R400) listSubmissionRes()         {}
func (*R400) readJudgeRes()              {}
func (*R400) readProblemJudgeRes()       {}
func (*R400) readProblemRes()            {}
func (*R400) readSubmissionProblemRes()  {}
func (*R400) readSubmissionRes()         {}
func (*R400) updateJudgeRes()            {}
func (*R400) updateProblemRes()          {}
func (*R400) updateSubmissionRes()       {}

type R404 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R404) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R404) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R404) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R404) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R404) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R404) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R404) deleteJudgeRes()            {}
func (*R404) deleteProblemRes()          {}
func (*R404) deleteSubmissionRes()       {}
func (*R404) listJudgeProblemsRes()      {}
func (*R404) listJudgeRes()              {}
func (*R404) listProblemRes()            {}
func (*R404) listProblemSubmissionsRes() {}
func (*R404) listSubmissionRes()         {}
func (*R404) readJudgeRes()              {}
func (*R404) readProblemJudgeRes()       {}
func (*R404) readProblemRes()            {}
func (*R404) readSubmissionProblemRes()  {}
func (*R404) readSubmissionRes()         {}
func (*R404) updateJudgeRes()            {}
func (*R404) updateProblemRes()          {}
func (*R404) updateSubmissionRes()       {}

type R409 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R409) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R409) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R409) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R409) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R409) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R409) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R409) createJudgeRes()            {}
func (*R409) createProblemRes()          {}
func (*R409) createSubmissionRes()       {}
func (*R409) deleteJudgeRes()            {}
func (*R409) deleteProblemRes()          {}
func (*R409) deleteSubmissionRes()       {}
func (*R409) listJudgeProblemsRes()      {}
func (*R409) listJudgeRes()              {}
func (*R409) listProblemRes()            {}
func (*R409) listProblemSubmissionsRes() {}
func (*R409) listSubmissionRes()         {}
func (*R409) readJudgeRes()              {}
func (*R409) readProblemJudgeRes()       {}
func (*R409) readProblemRes()            {}
func (*R409) readSubmissionProblemRes()  {}
func (*R409) readSubmissionRes()         {}
func (*R409) updateJudgeRes()            {}
func (*R409) updateProblemRes()          {}
func (*R409) updateSubmissionRes()       {}

type R500 struct {
	Code   int    `json:"code"`
	Status string `json:"status"`
	Errors jx.Raw `json:"errors"`
}

// GetCode returns the value of Code.
func (s *R500) GetCode() int {
	return s.Code
}

// GetStatus returns the value of Status.
func (s *R500) GetStatus() string {
	return s.Status
}

// GetErrors returns the value of Errors.
func (s *R500) GetErrors() jx.Raw {
	return s.Errors
}

// SetCode sets the value of Code.
func (s *R500) SetCode(val int) {
	s.Code = val
}

// SetStatus sets the value of Status.
func (s *R500) SetStatus(val string) {
	s.Status = val
}

// SetErrors sets the value of Errors.
func (s *R500) SetErrors(val jx.Raw) {
	s.Errors = val
}

func (*R500) createJudgeRes()            {}
func (*R500) createProblemRes()          {}
func (*R500) createSubmissionRes()       {}
func (*R500) deleteJudgeRes()            {}
func (*R500) deleteProblemRes()          {}
func (*R500) deleteSubmissionRes()       {}
func (*R500) healthCheckRes()            {}
func (*R500) listJudgeProblemsRes()      {}
func (*R500) listJudgeRes()              {}
func (*R500) listProblemRes()            {}
func (*R500) listProblemSubmissionsRes() {}
func (*R500) listSubmissionRes()         {}
func (*R500) readJudgeRes()              {}
func (*R500) readProblemJudgeRes()       {}
func (*R500) readProblemRes()            {}
func (*R500) readSubmissionProblemRes()  {}
func (*R500) readSubmissionRes()         {}
func (*R500) updateJudgeRes()            {}
func (*R500) updateProblemRes()          {}
func (*R500) updateSubmissionRes()       {}

// Ref: #/components/schemas/SubmissionCreate
type SubmissionCreate struct {
	ID        int                     `json:"id"`
	CreatedAt time.Time               `json:"created_at"`
	UpdatedAt time.Time               `json:"updated_at"`
	Status    SubmissionCreateStatus  `json:"status"`
	Verdict   SubmissionCreateVerdict `json:"verdict"`
	TestCount int                     `json:"test_count"`
}

// GetID returns the value of ID.
func (s *SubmissionCreate) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SubmissionCreate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SubmissionCreate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *SubmissionCreate) GetStatus() SubmissionCreateStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *SubmissionCreate) GetVerdict() SubmissionCreateVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *SubmissionCreate) GetTestCount() int {
	return s.TestCount
}

// SetID sets the value of ID.
func (s *SubmissionCreate) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SubmissionCreate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SubmissionCreate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *SubmissionCreate) SetStatus(val SubmissionCreateStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *SubmissionCreate) SetVerdict(val SubmissionCreateVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *SubmissionCreate) SetTestCount(val int) {
	s.TestCount = val
}

func (*SubmissionCreate) createSubmissionRes() {}

type SubmissionCreateStatus string

const (
	SubmissionCreateStatusPending   SubmissionCreateStatus = "pending"
	SubmissionCreateStatusCompiling SubmissionCreateStatus = "compiling"
	SubmissionCreateStatusJudging   SubmissionCreateStatus = "judging"
	SubmissionCreateStatusFinished  SubmissionCreateStatus = "finished"
)

// AllValues returns all SubmissionCreateStatus values.
func (SubmissionCreateStatus) AllValues() []SubmissionCreateStatus {
	return []SubmissionCreateStatus{
		SubmissionCreateStatusPending,
		SubmissionCreateStatusCompiling,
		SubmissionCreateStatusJudging,
		SubmissionCreateStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionCreateStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionCreateStatusPending:
		return []byte(s), nil
	case SubmissionCreateStatusCompiling:
		return []byte(s), nil
	case SubmissionCreateStatusJudging:
		return []byte(s), nil
	case SubmissionCreateStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionCreateStatus) UnmarshalText(data []byte) error {
	switch SubmissionCreateStatus(data) {
	case SubmissionCreateStatusPending:
		*s = SubmissionCreateStatusPending
		return nil
	case SubmissionCreateStatusCompiling:
		*s = SubmissionCreateStatusCompiling
		return nil
	case SubmissionCreateStatusJudging:
		*s = SubmissionCreateStatusJudging
		return nil
	case SubmissionCreateStatusFinished:
		*s = SubmissionCreateStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SubmissionCreateVerdict string

const (
	SubmissionCreateVerdictOK      SubmissionCreateVerdict = "OK"
	SubmissionCreateVerdictTLE     SubmissionCreateVerdict = "TLE"
	SubmissionCreateVerdictMLE     SubmissionCreateVerdict = "MLE"
	SubmissionCreateVerdictILE     SubmissionCreateVerdict = "ILE"
	SubmissionCreateVerdictWA      SubmissionCreateVerdict = "WA"
	SubmissionCreateVerdictCE      SubmissionCreateVerdict = "CE"
	SubmissionCreateVerdictRE      SubmissionCreateVerdict = "RE"
	SubmissionCreateVerdictPE      SubmissionCreateVerdict = "PE"
	SubmissionCreateVerdictCRASHED SubmissionCreateVerdict = "CRASHED"
	SubmissionCreateVerdictOTHER   SubmissionCreateVerdict = "OTHER"
)

// AllValues returns all SubmissionCreateVerdict values.
func (SubmissionCreateVerdict) AllValues() []SubmissionCreateVerdict {
	return []SubmissionCreateVerdict{
		SubmissionCreateVerdictOK,
		SubmissionCreateVerdictTLE,
		SubmissionCreateVerdictMLE,
		SubmissionCreateVerdictILE,
		SubmissionCreateVerdictWA,
		SubmissionCreateVerdictCE,
		SubmissionCreateVerdictRE,
		SubmissionCreateVerdictPE,
		SubmissionCreateVerdictCRASHED,
		SubmissionCreateVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionCreateVerdict) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionCreateVerdictOK:
		return []byte(s), nil
	case SubmissionCreateVerdictTLE:
		return []byte(s), nil
	case SubmissionCreateVerdictMLE:
		return []byte(s), nil
	case SubmissionCreateVerdictILE:
		return []byte(s), nil
	case SubmissionCreateVerdictWA:
		return []byte(s), nil
	case SubmissionCreateVerdictCE:
		return []byte(s), nil
	case SubmissionCreateVerdictRE:
		return []byte(s), nil
	case SubmissionCreateVerdictPE:
		return []byte(s), nil
	case SubmissionCreateVerdictCRASHED:
		return []byte(s), nil
	case SubmissionCreateVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionCreateVerdict) UnmarshalText(data []byte) error {
	switch SubmissionCreateVerdict(data) {
	case SubmissionCreateVerdictOK:
		*s = SubmissionCreateVerdictOK
		return nil
	case SubmissionCreateVerdictTLE:
		*s = SubmissionCreateVerdictTLE
		return nil
	case SubmissionCreateVerdictMLE:
		*s = SubmissionCreateVerdictMLE
		return nil
	case SubmissionCreateVerdictILE:
		*s = SubmissionCreateVerdictILE
		return nil
	case SubmissionCreateVerdictWA:
		*s = SubmissionCreateVerdictWA
		return nil
	case SubmissionCreateVerdictCE:
		*s = SubmissionCreateVerdictCE
		return nil
	case SubmissionCreateVerdictRE:
		*s = SubmissionCreateVerdictRE
		return nil
	case SubmissionCreateVerdictPE:
		*s = SubmissionCreateVerdictPE
		return nil
	case SubmissionCreateVerdictCRASHED:
		*s = SubmissionCreateVerdictCRASHED
		return nil
	case SubmissionCreateVerdictOTHER:
		*s = SubmissionCreateVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SubmissionList
type SubmissionList struct {
	ID        int                   `json:"id"`
	CreatedAt time.Time             `json:"created_at"`
	UpdatedAt time.Time             `json:"updated_at"`
	Status    SubmissionListStatus  `json:"status"`
	Verdict   SubmissionListVerdict `json:"verdict"`
	TestCount int                   `json:"test_count"`
}

// GetID returns the value of ID.
func (s *SubmissionList) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SubmissionList) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SubmissionList) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *SubmissionList) GetStatus() SubmissionListStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *SubmissionList) GetVerdict() SubmissionListVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *SubmissionList) GetTestCount() int {
	return s.TestCount
}

// SetID sets the value of ID.
func (s *SubmissionList) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SubmissionList) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SubmissionList) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *SubmissionList) SetStatus(val SubmissionListStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *SubmissionList) SetVerdict(val SubmissionListVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *SubmissionList) SetTestCount(val int) {
	s.TestCount = val
}

type SubmissionListStatus string

const (
	SubmissionListStatusPending   SubmissionListStatus = "pending"
	SubmissionListStatusCompiling SubmissionListStatus = "compiling"
	SubmissionListStatusJudging   SubmissionListStatus = "judging"
	SubmissionListStatusFinished  SubmissionListStatus = "finished"
)

// AllValues returns all SubmissionListStatus values.
func (SubmissionListStatus) AllValues() []SubmissionListStatus {
	return []SubmissionListStatus{
		SubmissionListStatusPending,
		SubmissionListStatusCompiling,
		SubmissionListStatusJudging,
		SubmissionListStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionListStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionListStatusPending:
		return []byte(s), nil
	case SubmissionListStatusCompiling:
		return []byte(s), nil
	case SubmissionListStatusJudging:
		return []byte(s), nil
	case SubmissionListStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionListStatus) UnmarshalText(data []byte) error {
	switch SubmissionListStatus(data) {
	case SubmissionListStatusPending:
		*s = SubmissionListStatusPending
		return nil
	case SubmissionListStatusCompiling:
		*s = SubmissionListStatusCompiling
		return nil
	case SubmissionListStatusJudging:
		*s = SubmissionListStatusJudging
		return nil
	case SubmissionListStatusFinished:
		*s = SubmissionListStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SubmissionListVerdict string

const (
	SubmissionListVerdictOK      SubmissionListVerdict = "OK"
	SubmissionListVerdictTLE     SubmissionListVerdict = "TLE"
	SubmissionListVerdictMLE     SubmissionListVerdict = "MLE"
	SubmissionListVerdictILE     SubmissionListVerdict = "ILE"
	SubmissionListVerdictWA      SubmissionListVerdict = "WA"
	SubmissionListVerdictCE      SubmissionListVerdict = "CE"
	SubmissionListVerdictRE      SubmissionListVerdict = "RE"
	SubmissionListVerdictPE      SubmissionListVerdict = "PE"
	SubmissionListVerdictCRASHED SubmissionListVerdict = "CRASHED"
	SubmissionListVerdictOTHER   SubmissionListVerdict = "OTHER"
)

// AllValues returns all SubmissionListVerdict values.
func (SubmissionListVerdict) AllValues() []SubmissionListVerdict {
	return []SubmissionListVerdict{
		SubmissionListVerdictOK,
		SubmissionListVerdictTLE,
		SubmissionListVerdictMLE,
		SubmissionListVerdictILE,
		SubmissionListVerdictWA,
		SubmissionListVerdictCE,
		SubmissionListVerdictRE,
		SubmissionListVerdictPE,
		SubmissionListVerdictCRASHED,
		SubmissionListVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionListVerdict) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionListVerdictOK:
		return []byte(s), nil
	case SubmissionListVerdictTLE:
		return []byte(s), nil
	case SubmissionListVerdictMLE:
		return []byte(s), nil
	case SubmissionListVerdictILE:
		return []byte(s), nil
	case SubmissionListVerdictWA:
		return []byte(s), nil
	case SubmissionListVerdictCE:
		return []byte(s), nil
	case SubmissionListVerdictRE:
		return []byte(s), nil
	case SubmissionListVerdictPE:
		return []byte(s), nil
	case SubmissionListVerdictCRASHED:
		return []byte(s), nil
	case SubmissionListVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionListVerdict) UnmarshalText(data []byte) error {
	switch SubmissionListVerdict(data) {
	case SubmissionListVerdictOK:
		*s = SubmissionListVerdictOK
		return nil
	case SubmissionListVerdictTLE:
		*s = SubmissionListVerdictTLE
		return nil
	case SubmissionListVerdictMLE:
		*s = SubmissionListVerdictMLE
		return nil
	case SubmissionListVerdictILE:
		*s = SubmissionListVerdictILE
		return nil
	case SubmissionListVerdictWA:
		*s = SubmissionListVerdictWA
		return nil
	case SubmissionListVerdictCE:
		*s = SubmissionListVerdictCE
		return nil
	case SubmissionListVerdictRE:
		*s = SubmissionListVerdictRE
		return nil
	case SubmissionListVerdictPE:
		*s = SubmissionListVerdictPE
		return nil
	case SubmissionListVerdictCRASHED:
		*s = SubmissionListVerdictCRASHED
		return nil
	case SubmissionListVerdictOTHER:
		*s = SubmissionListVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Submission_ProblemRead
type SubmissionProblemRead struct {
	ID        int       `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name      string    `json:"name"`
	Code      string    `json:"code"`
}

// GetID returns the value of ID.
func (s *SubmissionProblemRead) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SubmissionProblemRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SubmissionProblemRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *SubmissionProblemRead) GetName() string {
	return s.Name
}

// GetCode returns the value of Code.
func (s *SubmissionProblemRead) GetCode() string {
	return s.Code
}

// SetID sets the value of ID.
func (s *SubmissionProblemRead) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SubmissionProblemRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SubmissionProblemRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *SubmissionProblemRead) SetName(val string) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *SubmissionProblemRead) SetCode(val string) {
	s.Code = val
}

func (*SubmissionProblemRead) readSubmissionProblemRes() {}

// Ref: #/components/schemas/SubmissionRead
type SubmissionRead struct {
	ID        int                   `json:"id"`
	CreatedAt time.Time             `json:"created_at"`
	UpdatedAt time.Time             `json:"updated_at"`
	Status    SubmissionReadStatus  `json:"status"`
	Verdict   SubmissionReadVerdict `json:"verdict"`
	TestCount int                   `json:"test_count"`
}

// GetID returns the value of ID.
func (s *SubmissionRead) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SubmissionRead) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SubmissionRead) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *SubmissionRead) GetStatus() SubmissionReadStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *SubmissionRead) GetVerdict() SubmissionReadVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *SubmissionRead) GetTestCount() int {
	return s.TestCount
}

// SetID sets the value of ID.
func (s *SubmissionRead) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SubmissionRead) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SubmissionRead) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *SubmissionRead) SetStatus(val SubmissionReadStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *SubmissionRead) SetVerdict(val SubmissionReadVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *SubmissionRead) SetTestCount(val int) {
	s.TestCount = val
}

func (*SubmissionRead) readSubmissionRes() {}

type SubmissionReadStatus string

const (
	SubmissionReadStatusPending   SubmissionReadStatus = "pending"
	SubmissionReadStatusCompiling SubmissionReadStatus = "compiling"
	SubmissionReadStatusJudging   SubmissionReadStatus = "judging"
	SubmissionReadStatusFinished  SubmissionReadStatus = "finished"
)

// AllValues returns all SubmissionReadStatus values.
func (SubmissionReadStatus) AllValues() []SubmissionReadStatus {
	return []SubmissionReadStatus{
		SubmissionReadStatusPending,
		SubmissionReadStatusCompiling,
		SubmissionReadStatusJudging,
		SubmissionReadStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionReadStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionReadStatusPending:
		return []byte(s), nil
	case SubmissionReadStatusCompiling:
		return []byte(s), nil
	case SubmissionReadStatusJudging:
		return []byte(s), nil
	case SubmissionReadStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionReadStatus) UnmarshalText(data []byte) error {
	switch SubmissionReadStatus(data) {
	case SubmissionReadStatusPending:
		*s = SubmissionReadStatusPending
		return nil
	case SubmissionReadStatusCompiling:
		*s = SubmissionReadStatusCompiling
		return nil
	case SubmissionReadStatusJudging:
		*s = SubmissionReadStatusJudging
		return nil
	case SubmissionReadStatusFinished:
		*s = SubmissionReadStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SubmissionReadVerdict string

const (
	SubmissionReadVerdictOK      SubmissionReadVerdict = "OK"
	SubmissionReadVerdictTLE     SubmissionReadVerdict = "TLE"
	SubmissionReadVerdictMLE     SubmissionReadVerdict = "MLE"
	SubmissionReadVerdictILE     SubmissionReadVerdict = "ILE"
	SubmissionReadVerdictWA      SubmissionReadVerdict = "WA"
	SubmissionReadVerdictCE      SubmissionReadVerdict = "CE"
	SubmissionReadVerdictRE      SubmissionReadVerdict = "RE"
	SubmissionReadVerdictPE      SubmissionReadVerdict = "PE"
	SubmissionReadVerdictCRASHED SubmissionReadVerdict = "CRASHED"
	SubmissionReadVerdictOTHER   SubmissionReadVerdict = "OTHER"
)

// AllValues returns all SubmissionReadVerdict values.
func (SubmissionReadVerdict) AllValues() []SubmissionReadVerdict {
	return []SubmissionReadVerdict{
		SubmissionReadVerdictOK,
		SubmissionReadVerdictTLE,
		SubmissionReadVerdictMLE,
		SubmissionReadVerdictILE,
		SubmissionReadVerdictWA,
		SubmissionReadVerdictCE,
		SubmissionReadVerdictRE,
		SubmissionReadVerdictPE,
		SubmissionReadVerdictCRASHED,
		SubmissionReadVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionReadVerdict) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionReadVerdictOK:
		return []byte(s), nil
	case SubmissionReadVerdictTLE:
		return []byte(s), nil
	case SubmissionReadVerdictMLE:
		return []byte(s), nil
	case SubmissionReadVerdictILE:
		return []byte(s), nil
	case SubmissionReadVerdictWA:
		return []byte(s), nil
	case SubmissionReadVerdictCE:
		return []byte(s), nil
	case SubmissionReadVerdictRE:
		return []byte(s), nil
	case SubmissionReadVerdictPE:
		return []byte(s), nil
	case SubmissionReadVerdictCRASHED:
		return []byte(s), nil
	case SubmissionReadVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionReadVerdict) UnmarshalText(data []byte) error {
	switch SubmissionReadVerdict(data) {
	case SubmissionReadVerdictOK:
		*s = SubmissionReadVerdictOK
		return nil
	case SubmissionReadVerdictTLE:
		*s = SubmissionReadVerdictTLE
		return nil
	case SubmissionReadVerdictMLE:
		*s = SubmissionReadVerdictMLE
		return nil
	case SubmissionReadVerdictILE:
		*s = SubmissionReadVerdictILE
		return nil
	case SubmissionReadVerdictWA:
		*s = SubmissionReadVerdictWA
		return nil
	case SubmissionReadVerdictCE:
		*s = SubmissionReadVerdictCE
		return nil
	case SubmissionReadVerdictRE:
		*s = SubmissionReadVerdictRE
		return nil
	case SubmissionReadVerdictPE:
		*s = SubmissionReadVerdictPE
		return nil
	case SubmissionReadVerdictCRASHED:
		*s = SubmissionReadVerdictCRASHED
		return nil
	case SubmissionReadVerdictOTHER:
		*s = SubmissionReadVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SubmissionUpdate
type SubmissionUpdate struct {
	ID        int                     `json:"id"`
	CreatedAt time.Time               `json:"created_at"`
	UpdatedAt time.Time               `json:"updated_at"`
	Status    SubmissionUpdateStatus  `json:"status"`
	Verdict   SubmissionUpdateVerdict `json:"verdict"`
	TestCount int                     `json:"test_count"`
}

// GetID returns the value of ID.
func (s *SubmissionUpdate) GetID() int {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SubmissionUpdate) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *SubmissionUpdate) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *SubmissionUpdate) GetStatus() SubmissionUpdateStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *SubmissionUpdate) GetVerdict() SubmissionUpdateVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *SubmissionUpdate) GetTestCount() int {
	return s.TestCount
}

// SetID sets the value of ID.
func (s *SubmissionUpdate) SetID(val int) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SubmissionUpdate) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *SubmissionUpdate) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *SubmissionUpdate) SetStatus(val SubmissionUpdateStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *SubmissionUpdate) SetVerdict(val SubmissionUpdateVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *SubmissionUpdate) SetTestCount(val int) {
	s.TestCount = val
}

func (*SubmissionUpdate) updateSubmissionRes() {}

type SubmissionUpdateStatus string

const (
	SubmissionUpdateStatusPending   SubmissionUpdateStatus = "pending"
	SubmissionUpdateStatusCompiling SubmissionUpdateStatus = "compiling"
	SubmissionUpdateStatusJudging   SubmissionUpdateStatus = "judging"
	SubmissionUpdateStatusFinished  SubmissionUpdateStatus = "finished"
)

// AllValues returns all SubmissionUpdateStatus values.
func (SubmissionUpdateStatus) AllValues() []SubmissionUpdateStatus {
	return []SubmissionUpdateStatus{
		SubmissionUpdateStatusPending,
		SubmissionUpdateStatusCompiling,
		SubmissionUpdateStatusJudging,
		SubmissionUpdateStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionUpdateStatusPending:
		return []byte(s), nil
	case SubmissionUpdateStatusCompiling:
		return []byte(s), nil
	case SubmissionUpdateStatusJudging:
		return []byte(s), nil
	case SubmissionUpdateStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionUpdateStatus) UnmarshalText(data []byte) error {
	switch SubmissionUpdateStatus(data) {
	case SubmissionUpdateStatusPending:
		*s = SubmissionUpdateStatusPending
		return nil
	case SubmissionUpdateStatusCompiling:
		*s = SubmissionUpdateStatusCompiling
		return nil
	case SubmissionUpdateStatusJudging:
		*s = SubmissionUpdateStatusJudging
		return nil
	case SubmissionUpdateStatusFinished:
		*s = SubmissionUpdateStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type SubmissionUpdateVerdict string

const (
	SubmissionUpdateVerdictOK      SubmissionUpdateVerdict = "OK"
	SubmissionUpdateVerdictTLE     SubmissionUpdateVerdict = "TLE"
	SubmissionUpdateVerdictMLE     SubmissionUpdateVerdict = "MLE"
	SubmissionUpdateVerdictILE     SubmissionUpdateVerdict = "ILE"
	SubmissionUpdateVerdictWA      SubmissionUpdateVerdict = "WA"
	SubmissionUpdateVerdictCE      SubmissionUpdateVerdict = "CE"
	SubmissionUpdateVerdictRE      SubmissionUpdateVerdict = "RE"
	SubmissionUpdateVerdictPE      SubmissionUpdateVerdict = "PE"
	SubmissionUpdateVerdictCRASHED SubmissionUpdateVerdict = "CRASHED"
	SubmissionUpdateVerdictOTHER   SubmissionUpdateVerdict = "OTHER"
)

// AllValues returns all SubmissionUpdateVerdict values.
func (SubmissionUpdateVerdict) AllValues() []SubmissionUpdateVerdict {
	return []SubmissionUpdateVerdict{
		SubmissionUpdateVerdictOK,
		SubmissionUpdateVerdictTLE,
		SubmissionUpdateVerdictMLE,
		SubmissionUpdateVerdictILE,
		SubmissionUpdateVerdictWA,
		SubmissionUpdateVerdictCE,
		SubmissionUpdateVerdictRE,
		SubmissionUpdateVerdictPE,
		SubmissionUpdateVerdictCRASHED,
		SubmissionUpdateVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SubmissionUpdateVerdict) MarshalText() ([]byte, error) {
	switch s {
	case SubmissionUpdateVerdictOK:
		return []byte(s), nil
	case SubmissionUpdateVerdictTLE:
		return []byte(s), nil
	case SubmissionUpdateVerdictMLE:
		return []byte(s), nil
	case SubmissionUpdateVerdictILE:
		return []byte(s), nil
	case SubmissionUpdateVerdictWA:
		return []byte(s), nil
	case SubmissionUpdateVerdictCE:
		return []byte(s), nil
	case SubmissionUpdateVerdictRE:
		return []byte(s), nil
	case SubmissionUpdateVerdictPE:
		return []byte(s), nil
	case SubmissionUpdateVerdictCRASHED:
		return []byte(s), nil
	case SubmissionUpdateVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SubmissionUpdateVerdict) UnmarshalText(data []byte) error {
	switch SubmissionUpdateVerdict(data) {
	case SubmissionUpdateVerdictOK:
		*s = SubmissionUpdateVerdictOK
		return nil
	case SubmissionUpdateVerdictTLE:
		*s = SubmissionUpdateVerdictTLE
		return nil
	case SubmissionUpdateVerdictMLE:
		*s = SubmissionUpdateVerdictMLE
		return nil
	case SubmissionUpdateVerdictILE:
		*s = SubmissionUpdateVerdictILE
		return nil
	case SubmissionUpdateVerdictWA:
		*s = SubmissionUpdateVerdictWA
		return nil
	case SubmissionUpdateVerdictCE:
		*s = SubmissionUpdateVerdictCE
		return nil
	case SubmissionUpdateVerdictRE:
		*s = SubmissionUpdateVerdictRE
		return nil
	case SubmissionUpdateVerdictPE:
		*s = SubmissionUpdateVerdictPE
		return nil
	case SubmissionUpdateVerdictCRASHED:
		*s = SubmissionUpdateVerdictCRASHED
		return nil
	case SubmissionUpdateVerdictOTHER:
		*s = SubmissionUpdateVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateJudgeReq struct {
	CreatedAt     OptDateTime           `json:"created_at"`
	UpdatedAt     OptDateTime           `json:"updated_at"`
	Name          OptString             `json:"name"`
	Code          OptString             `json:"code"`
	Type          OptUpdateJudgeReqType `json:"type"`
	Configuration OptString             `json:"configuration"`
	Problems      []int                 `json:"problems"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UpdateJudgeReq) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UpdateJudgeReq) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *UpdateJudgeReq) GetName() OptString {
	return s.Name
}

// GetCode returns the value of Code.
func (s *UpdateJudgeReq) GetCode() OptString {
	return s.Code
}

// GetType returns the value of Type.
func (s *UpdateJudgeReq) GetType() OptUpdateJudgeReqType {
	return s.Type
}

// GetConfiguration returns the value of Configuration.
func (s *UpdateJudgeReq) GetConfiguration() OptString {
	return s.Configuration
}

// GetProblems returns the value of Problems.
func (s *UpdateJudgeReq) GetProblems() []int {
	return s.Problems
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UpdateJudgeReq) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UpdateJudgeReq) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *UpdateJudgeReq) SetName(val OptString) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *UpdateJudgeReq) SetCode(val OptString) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *UpdateJudgeReq) SetType(val OptUpdateJudgeReqType) {
	s.Type = val
}

// SetConfiguration sets the value of Configuration.
func (s *UpdateJudgeReq) SetConfiguration(val OptString) {
	s.Configuration = val
}

// SetProblems sets the value of Problems.
func (s *UpdateJudgeReq) SetProblems(val []int) {
	s.Problems = val
}

type UpdateJudgeReqType string

const (
	UpdateJudgeReqTypeLocal      UpdateJudgeReqType = "local"
	UpdateJudgeReqTypeCodeforces UpdateJudgeReqType = "codeforces"
	UpdateJudgeReqTypeVjudge     UpdateJudgeReqType = "vjudge"
	UpdateJudgeReqTypeSyoj       UpdateJudgeReqType = "syoj"
	UpdateJudgeReqTypeNoop       UpdateJudgeReqType = "noop"
)

// AllValues returns all UpdateJudgeReqType values.
func (UpdateJudgeReqType) AllValues() []UpdateJudgeReqType {
	return []UpdateJudgeReqType{
		UpdateJudgeReqTypeLocal,
		UpdateJudgeReqTypeCodeforces,
		UpdateJudgeReqTypeVjudge,
		UpdateJudgeReqTypeSyoj,
		UpdateJudgeReqTypeNoop,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateJudgeReqType) MarshalText() ([]byte, error) {
	switch s {
	case UpdateJudgeReqTypeLocal:
		return []byte(s), nil
	case UpdateJudgeReqTypeCodeforces:
		return []byte(s), nil
	case UpdateJudgeReqTypeVjudge:
		return []byte(s), nil
	case UpdateJudgeReqTypeSyoj:
		return []byte(s), nil
	case UpdateJudgeReqTypeNoop:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateJudgeReqType) UnmarshalText(data []byte) error {
	switch UpdateJudgeReqType(data) {
	case UpdateJudgeReqTypeLocal:
		*s = UpdateJudgeReqTypeLocal
		return nil
	case UpdateJudgeReqTypeCodeforces:
		*s = UpdateJudgeReqTypeCodeforces
		return nil
	case UpdateJudgeReqTypeVjudge:
		*s = UpdateJudgeReqTypeVjudge
		return nil
	case UpdateJudgeReqTypeSyoj:
		*s = UpdateJudgeReqTypeSyoj
		return nil
	case UpdateJudgeReqTypeNoop:
		*s = UpdateJudgeReqTypeNoop
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateProblemReq struct {
	CreatedAt   OptDateTime `json:"created_at"`
	UpdatedAt   OptDateTime `json:"updated_at"`
	Name        OptString   `json:"name"`
	Code        OptString   `json:"code"`
	Submissions []int       `json:"submissions"`
	Judge       OptInt      `json:"judge"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UpdateProblemReq) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UpdateProblemReq) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetName returns the value of Name.
func (s *UpdateProblemReq) GetName() OptString {
	return s.Name
}

// GetCode returns the value of Code.
func (s *UpdateProblemReq) GetCode() OptString {
	return s.Code
}

// GetSubmissions returns the value of Submissions.
func (s *UpdateProblemReq) GetSubmissions() []int {
	return s.Submissions
}

// GetJudge returns the value of Judge.
func (s *UpdateProblemReq) GetJudge() OptInt {
	return s.Judge
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UpdateProblemReq) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UpdateProblemReq) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetName sets the value of Name.
func (s *UpdateProblemReq) SetName(val OptString) {
	s.Name = val
}

// SetCode sets the value of Code.
func (s *UpdateProblemReq) SetCode(val OptString) {
	s.Code = val
}

// SetSubmissions sets the value of Submissions.
func (s *UpdateProblemReq) SetSubmissions(val []int) {
	s.Submissions = val
}

// SetJudge sets the value of Judge.
func (s *UpdateProblemReq) SetJudge(val OptInt) {
	s.Judge = val
}

type UpdateSubmissionReq struct {
	CreatedAt OptDateTime                   `json:"created_at"`
	UpdatedAt OptDateTime                   `json:"updated_at"`
	Status    OptUpdateSubmissionReqStatus  `json:"status"`
	Verdict   OptUpdateSubmissionReqVerdict `json:"verdict"`
	TestCount OptInt                        `json:"test_count"`
	Problem   OptInt                        `json:"problem"`
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UpdateSubmissionReq) GetCreatedAt() OptDateTime {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *UpdateSubmissionReq) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// GetStatus returns the value of Status.
func (s *UpdateSubmissionReq) GetStatus() OptUpdateSubmissionReqStatus {
	return s.Status
}

// GetVerdict returns the value of Verdict.
func (s *UpdateSubmissionReq) GetVerdict() OptUpdateSubmissionReqVerdict {
	return s.Verdict
}

// GetTestCount returns the value of TestCount.
func (s *UpdateSubmissionReq) GetTestCount() OptInt {
	return s.TestCount
}

// GetProblem returns the value of Problem.
func (s *UpdateSubmissionReq) GetProblem() OptInt {
	return s.Problem
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UpdateSubmissionReq) SetCreatedAt(val OptDateTime) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *UpdateSubmissionReq) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// SetStatus sets the value of Status.
func (s *UpdateSubmissionReq) SetStatus(val OptUpdateSubmissionReqStatus) {
	s.Status = val
}

// SetVerdict sets the value of Verdict.
func (s *UpdateSubmissionReq) SetVerdict(val OptUpdateSubmissionReqVerdict) {
	s.Verdict = val
}

// SetTestCount sets the value of TestCount.
func (s *UpdateSubmissionReq) SetTestCount(val OptInt) {
	s.TestCount = val
}

// SetProblem sets the value of Problem.
func (s *UpdateSubmissionReq) SetProblem(val OptInt) {
	s.Problem = val
}

type UpdateSubmissionReqStatus string

const (
	UpdateSubmissionReqStatusPending   UpdateSubmissionReqStatus = "pending"
	UpdateSubmissionReqStatusCompiling UpdateSubmissionReqStatus = "compiling"
	UpdateSubmissionReqStatusJudging   UpdateSubmissionReqStatus = "judging"
	UpdateSubmissionReqStatusFinished  UpdateSubmissionReqStatus = "finished"
)

// AllValues returns all UpdateSubmissionReqStatus values.
func (UpdateSubmissionReqStatus) AllValues() []UpdateSubmissionReqStatus {
	return []UpdateSubmissionReqStatus{
		UpdateSubmissionReqStatusPending,
		UpdateSubmissionReqStatusCompiling,
		UpdateSubmissionReqStatusJudging,
		UpdateSubmissionReqStatusFinished,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateSubmissionReqStatus) MarshalText() ([]byte, error) {
	switch s {
	case UpdateSubmissionReqStatusPending:
		return []byte(s), nil
	case UpdateSubmissionReqStatusCompiling:
		return []byte(s), nil
	case UpdateSubmissionReqStatusJudging:
		return []byte(s), nil
	case UpdateSubmissionReqStatusFinished:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateSubmissionReqStatus) UnmarshalText(data []byte) error {
	switch UpdateSubmissionReqStatus(data) {
	case UpdateSubmissionReqStatusPending:
		*s = UpdateSubmissionReqStatusPending
		return nil
	case UpdateSubmissionReqStatusCompiling:
		*s = UpdateSubmissionReqStatusCompiling
		return nil
	case UpdateSubmissionReqStatusJudging:
		*s = UpdateSubmissionReqStatusJudging
		return nil
	case UpdateSubmissionReqStatusFinished:
		*s = UpdateSubmissionReqStatusFinished
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type UpdateSubmissionReqVerdict string

const (
	UpdateSubmissionReqVerdictOK      UpdateSubmissionReqVerdict = "OK"
	UpdateSubmissionReqVerdictTLE     UpdateSubmissionReqVerdict = "TLE"
	UpdateSubmissionReqVerdictMLE     UpdateSubmissionReqVerdict = "MLE"
	UpdateSubmissionReqVerdictILE     UpdateSubmissionReqVerdict = "ILE"
	UpdateSubmissionReqVerdictWA      UpdateSubmissionReqVerdict = "WA"
	UpdateSubmissionReqVerdictCE      UpdateSubmissionReqVerdict = "CE"
	UpdateSubmissionReqVerdictRE      UpdateSubmissionReqVerdict = "RE"
	UpdateSubmissionReqVerdictPE      UpdateSubmissionReqVerdict = "PE"
	UpdateSubmissionReqVerdictCRASHED UpdateSubmissionReqVerdict = "CRASHED"
	UpdateSubmissionReqVerdictOTHER   UpdateSubmissionReqVerdict = "OTHER"
)

// AllValues returns all UpdateSubmissionReqVerdict values.
func (UpdateSubmissionReqVerdict) AllValues() []UpdateSubmissionReqVerdict {
	return []UpdateSubmissionReqVerdict{
		UpdateSubmissionReqVerdictOK,
		UpdateSubmissionReqVerdictTLE,
		UpdateSubmissionReqVerdictMLE,
		UpdateSubmissionReqVerdictILE,
		UpdateSubmissionReqVerdictWA,
		UpdateSubmissionReqVerdictCE,
		UpdateSubmissionReqVerdictRE,
		UpdateSubmissionReqVerdictPE,
		UpdateSubmissionReqVerdictCRASHED,
		UpdateSubmissionReqVerdictOTHER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s UpdateSubmissionReqVerdict) MarshalText() ([]byte, error) {
	switch s {
	case UpdateSubmissionReqVerdictOK:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictTLE:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictMLE:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictILE:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictWA:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictCE:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictRE:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictPE:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictCRASHED:
		return []byte(s), nil
	case UpdateSubmissionReqVerdictOTHER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *UpdateSubmissionReqVerdict) UnmarshalText(data []byte) error {
	switch UpdateSubmissionReqVerdict(data) {
	case UpdateSubmissionReqVerdictOK:
		*s = UpdateSubmissionReqVerdictOK
		return nil
	case UpdateSubmissionReqVerdictTLE:
		*s = UpdateSubmissionReqVerdictTLE
		return nil
	case UpdateSubmissionReqVerdictMLE:
		*s = UpdateSubmissionReqVerdictMLE
		return nil
	case UpdateSubmissionReqVerdictILE:
		*s = UpdateSubmissionReqVerdictILE
		return nil
	case UpdateSubmissionReqVerdictWA:
		*s = UpdateSubmissionReqVerdictWA
		return nil
	case UpdateSubmissionReqVerdictCE:
		*s = UpdateSubmissionReqVerdictCE
		return nil
	case UpdateSubmissionReqVerdictRE:
		*s = UpdateSubmissionReqVerdictRE
		return nil
	case UpdateSubmissionReqVerdictPE:
		*s = UpdateSubmissionReqVerdictPE
		return nil
	case UpdateSubmissionReqVerdictCRASHED:
		*s = UpdateSubmissionReqVerdictCRASHED
		return nil
	case UpdateSubmissionReqVerdictOTHER:
		*s = UpdateSubmissionReqVerdictOTHER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
