// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateJudgeReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateJudgeReqType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreateSubmissionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Verdict.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateSubmissionReqStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreateSubmissionReqVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *JudgeCreate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s JudgeCreateType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *JudgeList) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s JudgeListType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *JudgeRead) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s JudgeReadType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *JudgeUpdate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s JudgeUpdateType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListJudgeOKApplicationJSON) Validate() error {
	alias := ([]JudgeList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListJudgeProblemsOKApplicationJSON) Validate() error {
	alias := ([]JudgeProblemsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListProblemOKApplicationJSON) Validate() error {
	alias := ([]ProblemList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListProblemSubmissionsOKApplicationJSON) Validate() error {
	alias := ([]ProblemSubmissionsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListSubmissionOKApplicationJSON) Validate() error {
	alias := ([]SubmissionList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ProblemJudgeRead) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ProblemJudgeReadType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ProblemSubmissionsList) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Verdict.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ProblemSubmissionsListStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ProblemSubmissionsListVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubmissionCreate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Verdict.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubmissionCreateStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubmissionCreateVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubmissionList) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Verdict.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubmissionListStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubmissionListVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubmissionRead) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Verdict.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubmissionReadStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubmissionReadVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SubmissionUpdate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Verdict.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SubmissionUpdateStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SubmissionUpdateVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateJudgeReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateJudgeReqType) Validate() error {
	switch s {
	case "local":
		return nil
	case "codeforces":
		return nil
	case "vjudge":
		return nil
	case "syoj":
		return nil
	case "noop":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateSubmissionReq) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Status.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Verdict.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "verdict",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateSubmissionReqStatus) Validate() error {
	switch s {
	case "pending":
		return nil
	case "compiling":
		return nil
	case "judging":
		return nil
	case "finished":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateSubmissionReqVerdict) Validate() error {
	switch s {
	case "OK":
		return nil
	case "TLE":
		return nil
	case "MLE":
		return nil
	case "ILE":
		return nil
	case "WA":
		return nil
	case "CE":
		return nil
	case "RE":
		return nil
	case "PE":
		return nil
	case "CRASHED":
		return nil
	case "OTHER":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
