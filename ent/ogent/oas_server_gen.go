// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateJudge implements createJudge operation.
	//
	// Creates a new Judge and persists it to storage.
	//
	// POST /judges
	CreateJudge(ctx context.Context, req *CreateJudgeReq) (CreateJudgeRes, error)
	// CreateProblem implements createProblem operation.
	//
	// Creates a new Problem and persists it to storage.
	//
	// POST /problems
	CreateProblem(ctx context.Context, req *CreateProblemReq) (CreateProblemRes, error)
	// CreateSubmission implements createSubmission operation.
	//
	// Creates a new Submission and persists it to storage.
	//
	// POST /submissions
	CreateSubmission(ctx context.Context, req *CreateSubmissionReq) (CreateSubmissionRes, error)
	// DeleteJudge implements deleteJudge operation.
	//
	// Deletes the Judge with the requested ID.
	//
	// DELETE /judges/{id}
	DeleteJudge(ctx context.Context, params DeleteJudgeParams) (DeleteJudgeRes, error)
	// DeleteProblem implements deleteProblem operation.
	//
	// Deletes the Problem with the requested ID.
	//
	// DELETE /problems/{id}
	DeleteProblem(ctx context.Context, params DeleteProblemParams) (DeleteProblemRes, error)
	// DeleteSubmission implements deleteSubmission operation.
	//
	// Deletes the Submission with the requested ID.
	//
	// DELETE /submissions/{id}
	DeleteSubmission(ctx context.Context, params DeleteSubmissionParams) (DeleteSubmissionRes, error)
	// ListJudge implements listJudge operation.
	//
	// List Judges.
	//
	// GET /judges
	ListJudge(ctx context.Context, params ListJudgeParams) (ListJudgeRes, error)
	// ListJudgeProblems implements listJudgeProblems operation.
	//
	// List attached Problems.
	//
	// GET /judges/{id}/problems
	ListJudgeProblems(ctx context.Context, params ListJudgeProblemsParams) (ListJudgeProblemsRes, error)
	// ListProblem implements listProblem operation.
	//
	// List Problems.
	//
	// GET /problems
	ListProblem(ctx context.Context, params ListProblemParams) (ListProblemRes, error)
	// ListProblemSubmissions implements listProblemSubmissions operation.
	//
	// List attached Submissions.
	//
	// GET /problems/{id}/submissions
	ListProblemSubmissions(ctx context.Context, params ListProblemSubmissionsParams) (ListProblemSubmissionsRes, error)
	// ListSubmission implements listSubmission operation.
	//
	// List Submissions.
	//
	// GET /submissions
	ListSubmission(ctx context.Context, params ListSubmissionParams) (ListSubmissionRes, error)
	// ReadJudge implements readJudge operation.
	//
	// Finds the Judge with the requested ID and returns it.
	//
	// GET /judges/{id}
	ReadJudge(ctx context.Context, params ReadJudgeParams) (ReadJudgeRes, error)
	// ReadProblem implements readProblem operation.
	//
	// Finds the Problem with the requested ID and returns it.
	//
	// GET /problems/{id}
	ReadProblem(ctx context.Context, params ReadProblemParams) (ReadProblemRes, error)
	// ReadProblemJudge implements readProblemJudge operation.
	//
	// Find the attached Judge of the Problem with the given ID.
	//
	// GET /problems/{id}/judge
	ReadProblemJudge(ctx context.Context, params ReadProblemJudgeParams) (ReadProblemJudgeRes, error)
	// ReadSubmission implements readSubmission operation.
	//
	// Finds the Submission with the requested ID and returns it.
	//
	// GET /submissions/{id}
	ReadSubmission(ctx context.Context, params ReadSubmissionParams) (ReadSubmissionRes, error)
	// ReadSubmissionProblem implements readSubmissionProblem operation.
	//
	// Find the attached Problem of the Submission with the given ID.
	//
	// GET /submissions/{id}/problem
	ReadSubmissionProblem(ctx context.Context, params ReadSubmissionProblemParams) (ReadSubmissionProblemRes, error)
	// UpdateJudge implements updateJudge operation.
	//
	// Updates a Judge and persists changes to storage.
	//
	// PATCH /judges/{id}
	UpdateJudge(ctx context.Context, req *UpdateJudgeReq, params UpdateJudgeParams) (UpdateJudgeRes, error)
	// UpdateProblem implements updateProblem operation.
	//
	// Updates a Problem and persists changes to storage.
	//
	// PATCH /problems/{id}
	UpdateProblem(ctx context.Context, req *UpdateProblemReq, params UpdateProblemParams) (UpdateProblemRes, error)
	// UpdateSubmission implements updateSubmission operation.
	//
	// Updates a Submission and persists changes to storage.
	//
	// PATCH /submissions/{id}
	UpdateSubmission(ctx context.Context, req *UpdateSubmissionReq, params UpdateSubmissionParams) (UpdateSubmissionRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
