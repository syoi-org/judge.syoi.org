// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/syoi-org/judy/ent/judge"
	"github.com/syoi-org/judy/ent/predicate"
	"github.com/syoi-org/judy/ent/problem"
)

// JudgeUpdate is the builder for updating Judge entities.
type JudgeUpdate struct {
	config
	hooks    []Hook
	mutation *JudgeMutation
}

// Where appends a list predicates to the JudgeUpdate builder.
func (ju *JudgeUpdate) Where(ps ...predicate.Judge) *JudgeUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetCreatedAt sets the "created_at" field.
func (ju *JudgeUpdate) SetCreatedAt(t time.Time) *JudgeUpdate {
	ju.mutation.SetCreatedAt(t)
	return ju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ju *JudgeUpdate) SetNillableCreatedAt(t *time.Time) *JudgeUpdate {
	if t != nil {
		ju.SetCreatedAt(*t)
	}
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JudgeUpdate) SetUpdatedAt(t time.Time) *JudgeUpdate {
	ju.mutation.SetUpdatedAt(t)
	return ju
}

// SetName sets the "name" field.
func (ju *JudgeUpdate) SetName(s string) *JudgeUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ju *JudgeUpdate) SetNillableName(s *string) *JudgeUpdate {
	if s != nil {
		ju.SetName(*s)
	}
	return ju
}

// SetCode sets the "code" field.
func (ju *JudgeUpdate) SetCode(s string) *JudgeUpdate {
	ju.mutation.SetCode(s)
	return ju
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (ju *JudgeUpdate) SetNillableCode(s *string) *JudgeUpdate {
	if s != nil {
		ju.SetCode(*s)
	}
	return ju
}

// SetType sets the "type" field.
func (ju *JudgeUpdate) SetType(j judge.Type) *JudgeUpdate {
	ju.mutation.SetType(j)
	return ju
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ju *JudgeUpdate) SetNillableType(j *judge.Type) *JudgeUpdate {
	if j != nil {
		ju.SetType(*j)
	}
	return ju
}

// SetConfiguration sets the "configuration" field.
func (ju *JudgeUpdate) SetConfiguration(s string) *JudgeUpdate {
	ju.mutation.SetConfiguration(s)
	return ju
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (ju *JudgeUpdate) SetNillableConfiguration(s *string) *JudgeUpdate {
	if s != nil {
		ju.SetConfiguration(*s)
	}
	return ju
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (ju *JudgeUpdate) AddProblemIDs(ids ...int) *JudgeUpdate {
	ju.mutation.AddProblemIDs(ids...)
	return ju
}

// AddProblems adds the "problems" edges to the Problem entity.
func (ju *JudgeUpdate) AddProblems(p ...*Problem) *JudgeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ju.AddProblemIDs(ids...)
}

// Mutation returns the JudgeMutation object of the builder.
func (ju *JudgeUpdate) Mutation() *JudgeMutation {
	return ju.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (ju *JudgeUpdate) ClearProblems() *JudgeUpdate {
	ju.mutation.ClearProblems()
	return ju
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (ju *JudgeUpdate) RemoveProblemIDs(ids ...int) *JudgeUpdate {
	ju.mutation.RemoveProblemIDs(ids...)
	return ju
}

// RemoveProblems removes "problems" edges to Problem entities.
func (ju *JudgeUpdate) RemoveProblems(p ...*Problem) *JudgeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ju.RemoveProblemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JudgeUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JudgeUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JudgeUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JudgeUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JudgeUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := judge.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JudgeUpdate) check() error {
	if v, ok := ju.mutation.Name(); ok {
		if err := judge.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Judge.name": %w`, err)}
		}
	}
	if v, ok := ju.mutation.Code(); ok {
		if err := judge.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Judge.code": %w`, err)}
		}
	}
	if v, ok := ju.mutation.GetType(); ok {
		if err := judge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Judge.type": %w`, err)}
		}
	}
	return nil
}

func (ju *JudgeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(judge.Table, judge.Columns, sqlgraph.NewFieldSpec(judge.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.CreatedAt(); ok {
		_spec.SetField(judge.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(judge.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.SetField(judge.FieldName, field.TypeString, value)
	}
	if value, ok := ju.mutation.Code(); ok {
		_spec.SetField(judge.FieldCode, field.TypeString, value)
	}
	if value, ok := ju.mutation.GetType(); ok {
		_spec.SetField(judge.FieldType, field.TypeEnum, value)
	}
	if value, ok := ju.mutation.Configuration(); ok {
		_spec.SetField(judge.FieldConfiguration, field.TypeString, value)
	}
	if ju.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   judge.ProblemsTable,
			Columns: []string{judge.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !ju.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   judge.ProblemsTable,
			Columns: []string{judge.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   judge.ProblemsTable,
			Columns: []string{judge.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{judge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JudgeUpdateOne is the builder for updating a single Judge entity.
type JudgeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JudgeMutation
}

// SetCreatedAt sets the "created_at" field.
func (juo *JudgeUpdateOne) SetCreatedAt(t time.Time) *JudgeUpdateOne {
	juo.mutation.SetCreatedAt(t)
	return juo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (juo *JudgeUpdateOne) SetNillableCreatedAt(t *time.Time) *JudgeUpdateOne {
	if t != nil {
		juo.SetCreatedAt(*t)
	}
	return juo
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JudgeUpdateOne) SetUpdatedAt(t time.Time) *JudgeUpdateOne {
	juo.mutation.SetUpdatedAt(t)
	return juo
}

// SetName sets the "name" field.
func (juo *JudgeUpdateOne) SetName(s string) *JudgeUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (juo *JudgeUpdateOne) SetNillableName(s *string) *JudgeUpdateOne {
	if s != nil {
		juo.SetName(*s)
	}
	return juo
}

// SetCode sets the "code" field.
func (juo *JudgeUpdateOne) SetCode(s string) *JudgeUpdateOne {
	juo.mutation.SetCode(s)
	return juo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (juo *JudgeUpdateOne) SetNillableCode(s *string) *JudgeUpdateOne {
	if s != nil {
		juo.SetCode(*s)
	}
	return juo
}

// SetType sets the "type" field.
func (juo *JudgeUpdateOne) SetType(j judge.Type) *JudgeUpdateOne {
	juo.mutation.SetType(j)
	return juo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (juo *JudgeUpdateOne) SetNillableType(j *judge.Type) *JudgeUpdateOne {
	if j != nil {
		juo.SetType(*j)
	}
	return juo
}

// SetConfiguration sets the "configuration" field.
func (juo *JudgeUpdateOne) SetConfiguration(s string) *JudgeUpdateOne {
	juo.mutation.SetConfiguration(s)
	return juo
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (juo *JudgeUpdateOne) SetNillableConfiguration(s *string) *JudgeUpdateOne {
	if s != nil {
		juo.SetConfiguration(*s)
	}
	return juo
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (juo *JudgeUpdateOne) AddProblemIDs(ids ...int) *JudgeUpdateOne {
	juo.mutation.AddProblemIDs(ids...)
	return juo
}

// AddProblems adds the "problems" edges to the Problem entity.
func (juo *JudgeUpdateOne) AddProblems(p ...*Problem) *JudgeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return juo.AddProblemIDs(ids...)
}

// Mutation returns the JudgeMutation object of the builder.
func (juo *JudgeUpdateOne) Mutation() *JudgeMutation {
	return juo.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (juo *JudgeUpdateOne) ClearProblems() *JudgeUpdateOne {
	juo.mutation.ClearProblems()
	return juo
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (juo *JudgeUpdateOne) RemoveProblemIDs(ids ...int) *JudgeUpdateOne {
	juo.mutation.RemoveProblemIDs(ids...)
	return juo
}

// RemoveProblems removes "problems" edges to Problem entities.
func (juo *JudgeUpdateOne) RemoveProblems(p ...*Problem) *JudgeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return juo.RemoveProblemIDs(ids...)
}

// Where appends a list predicates to the JudgeUpdate builder.
func (juo *JudgeUpdateOne) Where(ps ...predicate.Judge) *JudgeUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JudgeUpdateOne) Select(field string, fields ...string) *JudgeUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Judge entity.
func (juo *JudgeUpdateOne) Save(ctx context.Context) (*Judge, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JudgeUpdateOne) SaveX(ctx context.Context) *Judge {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JudgeUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JudgeUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JudgeUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := judge.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JudgeUpdateOne) check() error {
	if v, ok := juo.mutation.Name(); ok {
		if err := judge.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Judge.name": %w`, err)}
		}
	}
	if v, ok := juo.mutation.Code(); ok {
		if err := judge.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Judge.code": %w`, err)}
		}
	}
	if v, ok := juo.mutation.GetType(); ok {
		if err := judge.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Judge.type": %w`, err)}
		}
	}
	return nil
}

func (juo *JudgeUpdateOne) sqlSave(ctx context.Context) (_node *Judge, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(judge.Table, judge.Columns, sqlgraph.NewFieldSpec(judge.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Judge.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, judge.FieldID)
		for _, f := range fields {
			if !judge.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != judge.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.CreatedAt(); ok {
		_spec.SetField(judge.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(judge.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.SetField(judge.FieldName, field.TypeString, value)
	}
	if value, ok := juo.mutation.Code(); ok {
		_spec.SetField(judge.FieldCode, field.TypeString, value)
	}
	if value, ok := juo.mutation.GetType(); ok {
		_spec.SetField(judge.FieldType, field.TypeEnum, value)
	}
	if value, ok := juo.mutation.Configuration(); ok {
		_spec.SetField(judge.FieldConfiguration, field.TypeString, value)
	}
	if juo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   judge.ProblemsTable,
			Columns: []string{judge.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !juo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   judge.ProblemsTable,
			Columns: []string{judge.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   judge.ProblemsTable,
			Columns: []string{judge.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Judge{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{judge.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
