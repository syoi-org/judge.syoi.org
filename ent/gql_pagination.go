// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/syoi-org/judy/ent/judge"
	"github.com/syoi-org/judy/ent/problem"
	"github.com/syoi-org/judy/ent/submission"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// JudgeEdge is the edge representation of Judge.
type JudgeEdge struct {
	Node   *Judge `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// JudgeConnection is the connection containing edges to Judge.
type JudgeConnection struct {
	Edges      []*JudgeEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *JudgeConnection) build(nodes []*Judge, pager *judgePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Judge
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Judge {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Judge {
			return nodes[i]
		}
	}
	c.Edges = make([]*JudgeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &JudgeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// JudgePaginateOption enables pagination customization.
type JudgePaginateOption func(*judgePager) error

// WithJudgeOrder configures pagination ordering.
func WithJudgeOrder(order *JudgeOrder) JudgePaginateOption {
	if order == nil {
		order = DefaultJudgeOrder
	}
	o := *order
	return func(pager *judgePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultJudgeOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithJudgeFilter configures pagination filter.
func WithJudgeFilter(filter func(*JudgeQuery) (*JudgeQuery, error)) JudgePaginateOption {
	return func(pager *judgePager) error {
		if filter == nil {
			return errors.New("JudgeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type judgePager struct {
	reverse bool
	order   *JudgeOrder
	filter  func(*JudgeQuery) (*JudgeQuery, error)
}

func newJudgePager(opts []JudgePaginateOption, reverse bool) (*judgePager, error) {
	pager := &judgePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultJudgeOrder
	}
	return pager, nil
}

func (p *judgePager) applyFilter(query *JudgeQuery) (*JudgeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *judgePager) toCursor(j *Judge) Cursor {
	return p.order.Field.toCursor(j)
}

func (p *judgePager) applyCursors(query *JudgeQuery, after, before *Cursor) (*JudgeQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultJudgeOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *judgePager) applyOrder(query *JudgeQuery) *JudgeQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultJudgeOrder.Field {
		query = query.Order(DefaultJudgeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *judgePager) orderExpr(query *JudgeQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultJudgeOrder.Field {
			b.Comma().Ident(DefaultJudgeOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Judge.
func (j *JudgeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...JudgePaginateOption,
) (*JudgeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newJudgePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if j, err = pager.applyFilter(j); err != nil {
		return nil, err
	}
	conn := &JudgeConnection{Edges: []*JudgeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := j.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if j, err = pager.applyCursors(j, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		j.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := j.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	j = pager.applyOrder(j)
	nodes, err := j.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// JudgeOrderField defines the ordering field of Judge.
type JudgeOrderField struct {
	// Value extracts the ordering value from the given Judge.
	Value    func(*Judge) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) judge.OrderOption
	toCursor func(*Judge) Cursor
}

// JudgeOrder defines the ordering of Judge.
type JudgeOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *JudgeOrderField `json:"field"`
}

// DefaultJudgeOrder is the default ordering of Judge.
var DefaultJudgeOrder = &JudgeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &JudgeOrderField{
		Value: func(j *Judge) (ent.Value, error) {
			return j.ID, nil
		},
		column: judge.FieldID,
		toTerm: judge.ByID,
		toCursor: func(j *Judge) Cursor {
			return Cursor{ID: j.ID}
		},
	},
}

// ToEdge converts Judge into JudgeEdge.
func (j *Judge) ToEdge(order *JudgeOrder) *JudgeEdge {
	if order == nil {
		order = DefaultJudgeOrder
	}
	return &JudgeEdge{
		Node:   j,
		Cursor: order.Field.toCursor(j),
	}
}

// ProblemEdge is the edge representation of Problem.
type ProblemEdge struct {
	Node   *Problem `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// ProblemConnection is the connection containing edges to Problem.
type ProblemConnection struct {
	Edges      []*ProblemEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *ProblemConnection) build(nodes []*Problem, pager *problemPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Problem
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Problem {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Problem {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProblemEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProblemEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProblemPaginateOption enables pagination customization.
type ProblemPaginateOption func(*problemPager) error

// WithProblemOrder configures pagination ordering.
func WithProblemOrder(order *ProblemOrder) ProblemPaginateOption {
	if order == nil {
		order = DefaultProblemOrder
	}
	o := *order
	return func(pager *problemPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProblemOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProblemFilter configures pagination filter.
func WithProblemFilter(filter func(*ProblemQuery) (*ProblemQuery, error)) ProblemPaginateOption {
	return func(pager *problemPager) error {
		if filter == nil {
			return errors.New("ProblemQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type problemPager struct {
	reverse bool
	order   *ProblemOrder
	filter  func(*ProblemQuery) (*ProblemQuery, error)
}

func newProblemPager(opts []ProblemPaginateOption, reverse bool) (*problemPager, error) {
	pager := &problemPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProblemOrder
	}
	return pager, nil
}

func (p *problemPager) applyFilter(query *ProblemQuery) (*ProblemQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *problemPager) toCursor(pr *Problem) Cursor {
	return p.order.Field.toCursor(pr)
}

func (p *problemPager) applyCursors(query *ProblemQuery, after, before *Cursor) (*ProblemQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProblemOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *problemPager) applyOrder(query *ProblemQuery) *ProblemQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProblemOrder.Field {
		query = query.Order(DefaultProblemOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *problemPager) orderExpr(query *ProblemQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProblemOrder.Field {
			b.Comma().Ident(DefaultProblemOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Problem.
func (pr *ProblemQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProblemPaginateOption,
) (*ProblemConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProblemPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pr, err = pager.applyFilter(pr); err != nil {
		return nil, err
	}
	conn := &ProblemConnection{Edges: []*ProblemEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pr.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pr, err = pager.applyCursors(pr, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pr.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pr = pager.applyOrder(pr)
	nodes, err := pr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ProblemOrderField defines the ordering field of Problem.
type ProblemOrderField struct {
	// Value extracts the ordering value from the given Problem.
	Value    func(*Problem) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) problem.OrderOption
	toCursor func(*Problem) Cursor
}

// ProblemOrder defines the ordering of Problem.
type ProblemOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *ProblemOrderField `json:"field"`
}

// DefaultProblemOrder is the default ordering of Problem.
var DefaultProblemOrder = &ProblemOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProblemOrderField{
		Value: func(pr *Problem) (ent.Value, error) {
			return pr.ID, nil
		},
		column: problem.FieldID,
		toTerm: problem.ByID,
		toCursor: func(pr *Problem) Cursor {
			return Cursor{ID: pr.ID}
		},
	},
}

// ToEdge converts Problem into ProblemEdge.
func (pr *Problem) ToEdge(order *ProblemOrder) *ProblemEdge {
	if order == nil {
		order = DefaultProblemOrder
	}
	return &ProblemEdge{
		Node:   pr,
		Cursor: order.Field.toCursor(pr),
	}
}

// SubmissionEdge is the edge representation of Submission.
type SubmissionEdge struct {
	Node   *Submission `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// SubmissionConnection is the connection containing edges to Submission.
type SubmissionConnection struct {
	Edges      []*SubmissionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *SubmissionConnection) build(nodes []*Submission, pager *submissionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Submission
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Submission {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Submission {
			return nodes[i]
		}
	}
	c.Edges = make([]*SubmissionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SubmissionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SubmissionPaginateOption enables pagination customization.
type SubmissionPaginateOption func(*submissionPager) error

// WithSubmissionOrder configures pagination ordering.
func WithSubmissionOrder(order *SubmissionOrder) SubmissionPaginateOption {
	if order == nil {
		order = DefaultSubmissionOrder
	}
	o := *order
	return func(pager *submissionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSubmissionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSubmissionFilter configures pagination filter.
func WithSubmissionFilter(filter func(*SubmissionQuery) (*SubmissionQuery, error)) SubmissionPaginateOption {
	return func(pager *submissionPager) error {
		if filter == nil {
			return errors.New("SubmissionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type submissionPager struct {
	reverse bool
	order   *SubmissionOrder
	filter  func(*SubmissionQuery) (*SubmissionQuery, error)
}

func newSubmissionPager(opts []SubmissionPaginateOption, reverse bool) (*submissionPager, error) {
	pager := &submissionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSubmissionOrder
	}
	return pager, nil
}

func (p *submissionPager) applyFilter(query *SubmissionQuery) (*SubmissionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *submissionPager) toCursor(s *Submission) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *submissionPager) applyCursors(query *SubmissionQuery, after, before *Cursor) (*SubmissionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSubmissionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *submissionPager) applyOrder(query *SubmissionQuery) *SubmissionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSubmissionOrder.Field {
		query = query.Order(DefaultSubmissionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *submissionPager) orderExpr(query *SubmissionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSubmissionOrder.Field {
			b.Comma().Ident(DefaultSubmissionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Submission.
func (s *SubmissionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SubmissionPaginateOption,
) (*SubmissionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSubmissionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SubmissionConnection{Edges: []*SubmissionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := s.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SubmissionOrderField defines the ordering field of Submission.
type SubmissionOrderField struct {
	// Value extracts the ordering value from the given Submission.
	Value    func(*Submission) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) submission.OrderOption
	toCursor func(*Submission) Cursor
}

// SubmissionOrder defines the ordering of Submission.
type SubmissionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *SubmissionOrderField `json:"field"`
}

// DefaultSubmissionOrder is the default ordering of Submission.
var DefaultSubmissionOrder = &SubmissionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SubmissionOrderField{
		Value: func(s *Submission) (ent.Value, error) {
			return s.ID, nil
		},
		column: submission.FieldID,
		toTerm: submission.ByID,
		toCursor: func(s *Submission) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Submission into SubmissionEdge.
func (s *Submission) ToEdge(order *SubmissionOrder) *SubmissionEdge {
	if order == nil {
		order = DefaultSubmissionOrder
	}
	return &SubmissionEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}
