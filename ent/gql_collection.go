// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/syoi-org/judy/ent/judge"
	"github.com/syoi-org/judy/ent/problem"
	"github.com/syoi-org/judy/ent/submission"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (j *JudgeQuery) CollectFields(ctx context.Context, satisfies ...string) (*JudgeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return j, nil
	}
	if err := j.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return j, nil
}

func (j *JudgeQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(judge.Columns))
		selectedFields = []string{judge.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "problems":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProblemClient{config: j.config}).Query()
			)
			args := newProblemPaginateArgs(fieldArgs(ctx, nil, path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newProblemPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					j.loadTotal = append(j.loadTotal, func(ctx context.Context, nodes []*Judge) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"judge_problems"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(judge.ProblemsColumn), ids...))
						})
						if err := query.GroupBy(judge.ProblemsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					j.loadTotal = append(j.loadTotal, func(_ context.Context, nodes []*Judge) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Problems)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, problemImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(judge.ProblemsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			j.WithNamedProblems(alias, func(wq *ProblemQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[judge.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, judge.FieldCreatedAt)
				fieldSeen[judge.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[judge.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, judge.FieldUpdatedAt)
				fieldSeen[judge.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[judge.FieldName]; !ok {
				selectedFields = append(selectedFields, judge.FieldName)
				fieldSeen[judge.FieldName] = struct{}{}
			}
		case "code":
			if _, ok := fieldSeen[judge.FieldCode]; !ok {
				selectedFields = append(selectedFields, judge.FieldCode)
				fieldSeen[judge.FieldCode] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[judge.FieldType]; !ok {
				selectedFields = append(selectedFields, judge.FieldType)
				fieldSeen[judge.FieldType] = struct{}{}
			}
		case "configuration":
			if _, ok := fieldSeen[judge.FieldConfiguration]; !ok {
				selectedFields = append(selectedFields, judge.FieldConfiguration)
				fieldSeen[judge.FieldConfiguration] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		j.Select(selectedFields...)
	}
	return nil
}

type judgePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []JudgePaginateOption
}

func newJudgePaginateArgs(rv map[string]any) *judgePaginateArgs {
	args := &judgePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *ProblemQuery) CollectFields(ctx context.Context, satisfies ...string) (*ProblemQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pr, nil
	}
	if err := pr.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pr, nil
}

func (pr *ProblemQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(problem.Columns))
		selectedFields = []string{problem.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "submissions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&SubmissionClient{config: pr.config}).Query()
			)
			args := newSubmissionPaginateArgs(fieldArgs(ctx, nil, path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newSubmissionPager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					pr.loadTotal = append(pr.loadTotal, func(ctx context.Context, nodes []*Problem) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"problem_submissions"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(problem.SubmissionsColumn), ids...))
						})
						if err := query.GroupBy(problem.SubmissionsColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				} else {
					pr.loadTotal = append(pr.loadTotal, func(_ context.Context, nodes []*Problem) error {
						for i := range nodes {
							n := len(nodes[i].Edges.Submissions)
							if nodes[i].Edges.totalCount[0] == nil {
								nodes[i].Edges.totalCount[0] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[0][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, false, opCtx, *field, path, mayAddCondition(satisfies, submissionImplementors)...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				if oneNode {
					pager.applyOrder(query.Limit(limit))
				} else {
					modify := entgql.LimitPerRow(problem.SubmissionsColumn, limit, pager.orderExpr(query))
					query.modifiers = append(query.modifiers, modify)
				}
			} else {
				query = pager.applyOrder(query)
			}
			pr.WithNamedSubmissions(alias, func(wq *SubmissionQuery) {
				*wq = *query
			})

		case "judge":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&JudgeClient{config: pr.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, judgeImplementors)...); err != nil {
				return err
			}
			pr.withJudge = query
		case "createdAt":
			if _, ok := fieldSeen[problem.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, problem.FieldCreatedAt)
				fieldSeen[problem.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[problem.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, problem.FieldUpdatedAt)
				fieldSeen[problem.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[problem.FieldName]; !ok {
				selectedFields = append(selectedFields, problem.FieldName)
				fieldSeen[problem.FieldName] = struct{}{}
			}
		case "code":
			if _, ok := fieldSeen[problem.FieldCode]; !ok {
				selectedFields = append(selectedFields, problem.FieldCode)
				fieldSeen[problem.FieldCode] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pr.Select(selectedFields...)
	}
	return nil
}

type problemPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []ProblemPaginateOption
}

func newProblemPaginateArgs(rv map[string]any) *problemPaginateArgs {
	args := &problemPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *SubmissionQuery) CollectFields(ctx context.Context, satisfies ...string) (*SubmissionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return s, nil
	}
	if err := s.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return s, nil
}

func (s *SubmissionQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(submission.Columns))
		selectedFields = []string{submission.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "problem":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&ProblemClient{config: s.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, problemImplementors)...); err != nil {
				return err
			}
			s.withProblem = query
		case "createdAt":
			if _, ok := fieldSeen[submission.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, submission.FieldCreatedAt)
				fieldSeen[submission.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[submission.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, submission.FieldUpdatedAt)
				fieldSeen[submission.FieldUpdatedAt] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[submission.FieldStatus]; !ok {
				selectedFields = append(selectedFields, submission.FieldStatus)
				fieldSeen[submission.FieldStatus] = struct{}{}
			}
		case "verdict":
			if _, ok := fieldSeen[submission.FieldVerdict]; !ok {
				selectedFields = append(selectedFields, submission.FieldVerdict)
				fieldSeen[submission.FieldVerdict] = struct{}{}
			}
		case "testCount":
			if _, ok := fieldSeen[submission.FieldTestCount]; !ok {
				selectedFields = append(selectedFields, submission.FieldTestCount)
				fieldSeen[submission.FieldTestCount] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		s.Select(selectedFields...)
	}
	return nil
}

type submissionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []SubmissionPaginateOption
}

func newSubmissionPaginateArgs(rv map[string]any) *submissionPaginateArgs {
	args := &submissionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
